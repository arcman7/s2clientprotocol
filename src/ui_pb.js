/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SC2APIProtocol.ActionCargoPanelUnload', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionControlGroup', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionControlGroup.ControlGroupAction', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionMultiPanel', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionMultiPanel.Type', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSelectArmy', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSelectIdleWorker', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSelectIdleWorker.Type', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSelectLarva', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSelectWarpGates', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionToggleAutocast', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionUI', null, global);
goog.exportSymbol('proto.SC2APIProtocol.BuildItem', null, global);
goog.exportSymbol('proto.SC2APIProtocol.CargoPanel', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ControlGroup', null, global);
goog.exportSymbol('proto.SC2APIProtocol.MultiPanel', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ObservationUI', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ProductionPanel', null, global);
goog.exportSymbol('proto.SC2APIProtocol.SinglePanel', null, global);
goog.exportSymbol('proto.SC2APIProtocol.UnitInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ObservationUI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ObservationUI.repeatedFields_, proto.SC2APIProtocol.ObservationUI.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.ObservationUI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ObservationUI.displayName = 'proto.SC2APIProtocol.ObservationUI';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ObservationUI.repeatedFields_ = [1];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.ObservationUI.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.ObservationUI.PanelCase = {
  PANEL_NOT_SET: 0,
  SINGLE: 2,
  MULTI: 3,
  CARGO: 4,
  PRODUCTION: 5
};

/**
 * @return {proto.SC2APIProtocol.ObservationUI.PanelCase}
 */
proto.SC2APIProtocol.ObservationUI.prototype.getPanelCase = function() {
  return /** @type {proto.SC2APIProtocol.ObservationUI.PanelCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.ObservationUI.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ObservationUI.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ObservationUI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ObservationUI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ObservationUI.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.SC2APIProtocol.ControlGroup.toObject, includeInstance),
    single: (f = msg.getSingle()) && proto.SC2APIProtocol.SinglePanel.toObject(includeInstance, f),
    multi: (f = msg.getMulti()) && proto.SC2APIProtocol.MultiPanel.toObject(includeInstance, f),
    cargo: (f = msg.getCargo()) && proto.SC2APIProtocol.CargoPanel.toObject(includeInstance, f),
    production: (f = msg.getProduction()) && proto.SC2APIProtocol.ProductionPanel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ObservationUI}
 */
proto.SC2APIProtocol.ObservationUI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ObservationUI;
  return proto.SC2APIProtocol.ObservationUI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ObservationUI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ObservationUI}
 */
proto.SC2APIProtocol.ObservationUI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.ControlGroup;
      reader.readMessage(value,proto.SC2APIProtocol.ControlGroup.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.SinglePanel;
      reader.readMessage(value,proto.SC2APIProtocol.SinglePanel.deserializeBinaryFromReader);
      msg.setSingle(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.MultiPanel;
      reader.readMessage(value,proto.SC2APIProtocol.MultiPanel.deserializeBinaryFromReader);
      msg.setMulti(value);
      break;
    case 4:
      var value = new proto.SC2APIProtocol.CargoPanel;
      reader.readMessage(value,proto.SC2APIProtocol.CargoPanel.deserializeBinaryFromReader);
      msg.setCargo(value);
      break;
    case 5:
      var value = new proto.SC2APIProtocol.ProductionPanel;
      reader.readMessage(value,proto.SC2APIProtocol.ProductionPanel.deserializeBinaryFromReader);
      msg.setProduction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ObservationUI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ObservationUI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ObservationUI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ObservationUI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SC2APIProtocol.ControlGroup.serializeBinaryToWriter
    );
  }
  f = message.getSingle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SC2APIProtocol.SinglePanel.serializeBinaryToWriter
    );
  }
  f = message.getMulti();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SC2APIProtocol.MultiPanel.serializeBinaryToWriter
    );
  }
  f = message.getCargo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SC2APIProtocol.CargoPanel.serializeBinaryToWriter
    );
  }
  f = message.getProduction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SC2APIProtocol.ProductionPanel.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ControlGroup groups = 1;
 * @return {!Array.<!proto.SC2APIProtocol.ControlGroup>}
 */
proto.SC2APIProtocol.ObservationUI.prototype.getGroupsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.ControlGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.ControlGroup, 1));
};


/** @param {!Array.<!proto.SC2APIProtocol.ControlGroup>} value */
proto.SC2APIProtocol.ObservationUI.prototype.setGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SC2APIProtocol.ControlGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.ControlGroup}
 */
proto.SC2APIProtocol.ObservationUI.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SC2APIProtocol.ControlGroup, opt_index);
};


proto.SC2APIProtocol.ObservationUI.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};


/**
 * optional SinglePanel single = 2;
 * @return {?proto.SC2APIProtocol.SinglePanel}
 */
proto.SC2APIProtocol.ObservationUI.prototype.getSingle = function() {
  return /** @type{?proto.SC2APIProtocol.SinglePanel} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.SinglePanel, 2));
};


/** @param {?proto.SC2APIProtocol.SinglePanel|undefined} value */
proto.SC2APIProtocol.ObservationUI.prototype.setSingle = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SC2APIProtocol.ObservationUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ObservationUI.prototype.clearSingle = function() {
  this.setSingle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationUI.prototype.hasSingle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MultiPanel multi = 3;
 * @return {?proto.SC2APIProtocol.MultiPanel}
 */
proto.SC2APIProtocol.ObservationUI.prototype.getMulti = function() {
  return /** @type{?proto.SC2APIProtocol.MultiPanel} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.MultiPanel, 3));
};


/** @param {?proto.SC2APIProtocol.MultiPanel|undefined} value */
proto.SC2APIProtocol.ObservationUI.prototype.setMulti = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.SC2APIProtocol.ObservationUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ObservationUI.prototype.clearMulti = function() {
  this.setMulti(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationUI.prototype.hasMulti = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CargoPanel cargo = 4;
 * @return {?proto.SC2APIProtocol.CargoPanel}
 */
proto.SC2APIProtocol.ObservationUI.prototype.getCargo = function() {
  return /** @type{?proto.SC2APIProtocol.CargoPanel} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CargoPanel, 4));
};


/** @param {?proto.SC2APIProtocol.CargoPanel|undefined} value */
proto.SC2APIProtocol.ObservationUI.prototype.setCargo = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.SC2APIProtocol.ObservationUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ObservationUI.prototype.clearCargo = function() {
  this.setCargo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationUI.prototype.hasCargo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProductionPanel production = 5;
 * @return {?proto.SC2APIProtocol.ProductionPanel}
 */
proto.SC2APIProtocol.ObservationUI.prototype.getProduction = function() {
  return /** @type{?proto.SC2APIProtocol.ProductionPanel} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ProductionPanel, 5));
};


/** @param {?proto.SC2APIProtocol.ProductionPanel|undefined} value */
proto.SC2APIProtocol.ObservationUI.prototype.setProduction = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.SC2APIProtocol.ObservationUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ObservationUI.prototype.clearProduction = function() {
  this.setProduction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationUI.prototype.hasProduction = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ControlGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ControlGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ControlGroup.displayName = 'proto.SC2APIProtocol.ControlGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ControlGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ControlGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ControlGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ControlGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlGroupIndex: jspb.Message.getField(msg, 1),
    leaderUnitType: jspb.Message.getField(msg, 2),
    count: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ControlGroup}
 */
proto.SC2APIProtocol.ControlGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ControlGroup;
  return proto.SC2APIProtocol.ControlGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ControlGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ControlGroup}
 */
proto.SC2APIProtocol.ControlGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setControlGroupIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeaderUnitType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ControlGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ControlGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ControlGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ControlGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 control_group_index = 1;
 * @return {number}
 */
proto.SC2APIProtocol.ControlGroup.prototype.getControlGroupIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ControlGroup.prototype.setControlGroupIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ControlGroup.prototype.clearControlGroupIndex = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ControlGroup.prototype.hasControlGroupIndex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 leader_unit_type = 2;
 * @return {number}
 */
proto.SC2APIProtocol.ControlGroup.prototype.getLeaderUnitType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ControlGroup.prototype.setLeaderUnitType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.ControlGroup.prototype.clearLeaderUnitType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ControlGroup.prototype.hasLeaderUnitType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 count = 3;
 * @return {number}
 */
proto.SC2APIProtocol.ControlGroup.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ControlGroup.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.ControlGroup.prototype.clearCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ControlGroup.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.UnitInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.UnitInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.UnitInfo.displayName = 'proto.SC2APIProtocol.UnitInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.UnitInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.UnitInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.UnitInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.UnitInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitType: jspb.Message.getField(msg, 1),
    playerRelative: jspb.Message.getField(msg, 2),
    health: jspb.Message.getField(msg, 3),
    shields: jspb.Message.getField(msg, 4),
    energy: jspb.Message.getField(msg, 5),
    transportSlotsTaken: jspb.Message.getField(msg, 6),
    buildProgress: jspb.Message.getOptionalFloatingPointField(msg, 7),
    addOn: (f = msg.getAddOn()) && proto.SC2APIProtocol.UnitInfo.toObject(includeInstance, f),
    maxHealth: jspb.Message.getField(msg, 9),
    maxShields: jspb.Message.getField(msg, 10),
    maxEnergy: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.UnitInfo}
 */
proto.SC2APIProtocol.UnitInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.UnitInfo;
  return proto.SC2APIProtocol.UnitInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.UnitInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.UnitInfo}
 */
proto.SC2APIProtocol.UnitInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnitType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerRelative(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHealth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShields(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnergy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransportSlotsTaken(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBuildProgress(value);
      break;
    case 8:
      var value = new proto.SC2APIProtocol.UnitInfo;
      reader.readMessage(value,proto.SC2APIProtocol.UnitInfo.deserializeBinaryFromReader);
      msg.setAddOn(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxHealth(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxShields(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxEnergy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.UnitInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.UnitInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.UnitInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.UnitInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getAddOn();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SC2APIProtocol.UnitInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional uint32 unit_type = 1;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getUnitType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setUnitType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearUnitType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasUnitType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 player_relative = 2;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getPlayerRelative = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setPlayerRelative = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearPlayerRelative = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasPlayerRelative = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 health = 3;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setHealth = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearHealth = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasHealth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 shields = 4;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getShields = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setShields = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearShields = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasShields = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 energy = 5;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getEnergy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setEnergy = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearEnergy = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasEnergy = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 transport_slots_taken = 6;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getTransportSlotsTaken = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setTransportSlotsTaken = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearTransportSlotsTaken = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasTransportSlotsTaken = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float build_progress = 7;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getBuildProgress = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setBuildProgress = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearBuildProgress = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasBuildProgress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional UnitInfo add_on = 8;
 * @return {?proto.SC2APIProtocol.UnitInfo}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getAddOn = function() {
  return /** @type{?proto.SC2APIProtocol.UnitInfo} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.UnitInfo, 8));
};


/** @param {?proto.SC2APIProtocol.UnitInfo|undefined} value */
proto.SC2APIProtocol.UnitInfo.prototype.setAddOn = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearAddOn = function() {
  this.setAddOn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasAddOn = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 max_health = 9;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getMaxHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setMaxHealth = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearMaxHealth = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasMaxHealth = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 max_shields = 10;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getMaxShields = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setMaxShields = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearMaxShields = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasMaxShields = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 max_energy = 11;
 * @return {number}
 */
proto.SC2APIProtocol.UnitInfo.prototype.getMaxEnergy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitInfo.prototype.setMaxEnergy = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.SC2APIProtocol.UnitInfo.prototype.clearMaxEnergy = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitInfo.prototype.hasMaxEnergy = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.SinglePanel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.SinglePanel.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.SinglePanel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.SinglePanel.displayName = 'proto.SC2APIProtocol.SinglePanel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.SinglePanel.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.SinglePanel.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.SinglePanel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.SinglePanel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.SinglePanel.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && proto.SC2APIProtocol.UnitInfo.toObject(includeInstance, f),
    attackUpgradeLevel: jspb.Message.getField(msg, 2),
    armorUpgradeLevel: jspb.Message.getField(msg, 3),
    shieldUpgradeLevel: jspb.Message.getField(msg, 4),
    buffsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.SinglePanel}
 */
proto.SC2APIProtocol.SinglePanel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.SinglePanel;
  return proto.SC2APIProtocol.SinglePanel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.SinglePanel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.SinglePanel}
 */
proto.SC2APIProtocol.SinglePanel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.UnitInfo;
      reader.readMessage(value,proto.SC2APIProtocol.UnitInfo.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackUpgradeLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArmorUpgradeLevel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShieldUpgradeLevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addBuffs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.SinglePanel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.SinglePanel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.SinglePanel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.SinglePanel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.UnitInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBuffsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      5,
      f
    );
  }
};


/**
 * optional UnitInfo unit = 1;
 * @return {?proto.SC2APIProtocol.UnitInfo}
 */
proto.SC2APIProtocol.SinglePanel.prototype.getUnit = function() {
  return /** @type{?proto.SC2APIProtocol.UnitInfo} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.UnitInfo, 1));
};


/** @param {?proto.SC2APIProtocol.UnitInfo|undefined} value */
proto.SC2APIProtocol.SinglePanel.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.SinglePanel.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.SinglePanel.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 attack_upgrade_level = 2;
 * @return {number}
 */
proto.SC2APIProtocol.SinglePanel.prototype.getAttackUpgradeLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.SinglePanel.prototype.setAttackUpgradeLevel = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.SinglePanel.prototype.clearAttackUpgradeLevel = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.SinglePanel.prototype.hasAttackUpgradeLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 armor_upgrade_level = 3;
 * @return {number}
 */
proto.SC2APIProtocol.SinglePanel.prototype.getArmorUpgradeLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.SinglePanel.prototype.setArmorUpgradeLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.SinglePanel.prototype.clearArmorUpgradeLevel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.SinglePanel.prototype.hasArmorUpgradeLevel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 shield_upgrade_level = 4;
 * @return {number}
 */
proto.SC2APIProtocol.SinglePanel.prototype.getShieldUpgradeLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.SinglePanel.prototype.setShieldUpgradeLevel = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.SinglePanel.prototype.clearShieldUpgradeLevel = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.SinglePanel.prototype.hasShieldUpgradeLevel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int32 buffs = 5;
 * @return {!Array.<number>}
 */
proto.SC2APIProtocol.SinglePanel.prototype.getBuffsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.SC2APIProtocol.SinglePanel.prototype.setBuffsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SC2APIProtocol.SinglePanel.prototype.addBuffs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.SC2APIProtocol.SinglePanel.prototype.clearBuffsList = function() {
  this.setBuffsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.MultiPanel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.MultiPanel.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.MultiPanel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.MultiPanel.displayName = 'proto.SC2APIProtocol.MultiPanel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.MultiPanel.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.MultiPanel.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.MultiPanel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.MultiPanel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.MultiPanel.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitsList: jspb.Message.toObjectList(msg.getUnitsList(),
    proto.SC2APIProtocol.UnitInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.MultiPanel}
 */
proto.SC2APIProtocol.MultiPanel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.MultiPanel;
  return proto.SC2APIProtocol.MultiPanel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.MultiPanel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.MultiPanel}
 */
proto.SC2APIProtocol.MultiPanel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.UnitInfo;
      reader.readMessage(value,proto.SC2APIProtocol.UnitInfo.deserializeBinaryFromReader);
      msg.addUnits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.MultiPanel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.MultiPanel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.MultiPanel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.MultiPanel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SC2APIProtocol.UnitInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UnitInfo units = 1;
 * @return {!Array.<!proto.SC2APIProtocol.UnitInfo>}
 */
proto.SC2APIProtocol.MultiPanel.prototype.getUnitsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.UnitInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.UnitInfo, 1));
};


/** @param {!Array.<!proto.SC2APIProtocol.UnitInfo>} value */
proto.SC2APIProtocol.MultiPanel.prototype.setUnitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SC2APIProtocol.UnitInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.UnitInfo}
 */
proto.SC2APIProtocol.MultiPanel.prototype.addUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SC2APIProtocol.UnitInfo, opt_index);
};


proto.SC2APIProtocol.MultiPanel.prototype.clearUnitsList = function() {
  this.setUnitsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.CargoPanel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.CargoPanel.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.CargoPanel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.CargoPanel.displayName = 'proto.SC2APIProtocol.CargoPanel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.CargoPanel.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.CargoPanel.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.CargoPanel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.CargoPanel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.CargoPanel.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && proto.SC2APIProtocol.UnitInfo.toObject(includeInstance, f),
    passengersList: jspb.Message.toObjectList(msg.getPassengersList(),
    proto.SC2APIProtocol.UnitInfo.toObject, includeInstance),
    slotsAvailable: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.CargoPanel}
 */
proto.SC2APIProtocol.CargoPanel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.CargoPanel;
  return proto.SC2APIProtocol.CargoPanel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.CargoPanel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.CargoPanel}
 */
proto.SC2APIProtocol.CargoPanel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.UnitInfo;
      reader.readMessage(value,proto.SC2APIProtocol.UnitInfo.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.UnitInfo;
      reader.readMessage(value,proto.SC2APIProtocol.UnitInfo.deserializeBinaryFromReader);
      msg.addPassengers(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlotsAvailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.CargoPanel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.CargoPanel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.CargoPanel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.CargoPanel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.UnitInfo.serializeBinaryToWriter
    );
  }
  f = message.getPassengersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SC2APIProtocol.UnitInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional UnitInfo unit = 1;
 * @return {?proto.SC2APIProtocol.UnitInfo}
 */
proto.SC2APIProtocol.CargoPanel.prototype.getUnit = function() {
  return /** @type{?proto.SC2APIProtocol.UnitInfo} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.UnitInfo, 1));
};


/** @param {?proto.SC2APIProtocol.UnitInfo|undefined} value */
proto.SC2APIProtocol.CargoPanel.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.CargoPanel.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.CargoPanel.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UnitInfo passengers = 2;
 * @return {!Array.<!proto.SC2APIProtocol.UnitInfo>}
 */
proto.SC2APIProtocol.CargoPanel.prototype.getPassengersList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.UnitInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.UnitInfo, 2));
};


/** @param {!Array.<!proto.SC2APIProtocol.UnitInfo>} value */
proto.SC2APIProtocol.CargoPanel.prototype.setPassengersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SC2APIProtocol.UnitInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.UnitInfo}
 */
proto.SC2APIProtocol.CargoPanel.prototype.addPassengers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SC2APIProtocol.UnitInfo, opt_index);
};


proto.SC2APIProtocol.CargoPanel.prototype.clearPassengersList = function() {
  this.setPassengersList([]);
};


/**
 * optional int32 slots_available = 3;
 * @return {number}
 */
proto.SC2APIProtocol.CargoPanel.prototype.getSlotsAvailable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.CargoPanel.prototype.setSlotsAvailable = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.CargoPanel.prototype.clearSlotsAvailable = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.CargoPanel.prototype.hasSlotsAvailable = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.BuildItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.BuildItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.BuildItem.displayName = 'proto.SC2APIProtocol.BuildItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.BuildItem.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.BuildItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.BuildItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.BuildItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityId: jspb.Message.getField(msg, 1),
    buildProgress: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.BuildItem}
 */
proto.SC2APIProtocol.BuildItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.BuildItem;
  return proto.SC2APIProtocol.BuildItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.BuildItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.BuildItem}
 */
proto.SC2APIProtocol.BuildItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilityId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBuildProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.BuildItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.BuildItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.BuildItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.BuildItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional uint32 ability_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.BuildItem.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.BuildItem.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.BuildItem.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.BuildItem.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float build_progress = 2;
 * @return {number}
 */
proto.SC2APIProtocol.BuildItem.prototype.getBuildProgress = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.BuildItem.prototype.setBuildProgress = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.BuildItem.prototype.clearBuildProgress = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.BuildItem.prototype.hasBuildProgress = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ProductionPanel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ProductionPanel.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.ProductionPanel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ProductionPanel.displayName = 'proto.SC2APIProtocol.ProductionPanel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ProductionPanel.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ProductionPanel.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ProductionPanel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ProductionPanel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ProductionPanel.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && proto.SC2APIProtocol.UnitInfo.toObject(includeInstance, f),
    buildQueueList: jspb.Message.toObjectList(msg.getBuildQueueList(),
    proto.SC2APIProtocol.UnitInfo.toObject, includeInstance),
    productionQueueList: jspb.Message.toObjectList(msg.getProductionQueueList(),
    proto.SC2APIProtocol.BuildItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ProductionPanel}
 */
proto.SC2APIProtocol.ProductionPanel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ProductionPanel;
  return proto.SC2APIProtocol.ProductionPanel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ProductionPanel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ProductionPanel}
 */
proto.SC2APIProtocol.ProductionPanel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.UnitInfo;
      reader.readMessage(value,proto.SC2APIProtocol.UnitInfo.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.UnitInfo;
      reader.readMessage(value,proto.SC2APIProtocol.UnitInfo.deserializeBinaryFromReader);
      msg.addBuildQueue(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.BuildItem;
      reader.readMessage(value,proto.SC2APIProtocol.BuildItem.deserializeBinaryFromReader);
      msg.addProductionQueue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ProductionPanel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ProductionPanel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ProductionPanel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ProductionPanel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.UnitInfo.serializeBinaryToWriter
    );
  }
  f = message.getBuildQueueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SC2APIProtocol.UnitInfo.serializeBinaryToWriter
    );
  }
  f = message.getProductionQueueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SC2APIProtocol.BuildItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional UnitInfo unit = 1;
 * @return {?proto.SC2APIProtocol.UnitInfo}
 */
proto.SC2APIProtocol.ProductionPanel.prototype.getUnit = function() {
  return /** @type{?proto.SC2APIProtocol.UnitInfo} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.UnitInfo, 1));
};


/** @param {?proto.SC2APIProtocol.UnitInfo|undefined} value */
proto.SC2APIProtocol.ProductionPanel.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.ProductionPanel.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ProductionPanel.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UnitInfo build_queue = 2;
 * @return {!Array.<!proto.SC2APIProtocol.UnitInfo>}
 */
proto.SC2APIProtocol.ProductionPanel.prototype.getBuildQueueList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.UnitInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.UnitInfo, 2));
};


/** @param {!Array.<!proto.SC2APIProtocol.UnitInfo>} value */
proto.SC2APIProtocol.ProductionPanel.prototype.setBuildQueueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SC2APIProtocol.UnitInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.UnitInfo}
 */
proto.SC2APIProtocol.ProductionPanel.prototype.addBuildQueue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SC2APIProtocol.UnitInfo, opt_index);
};


proto.SC2APIProtocol.ProductionPanel.prototype.clearBuildQueueList = function() {
  this.setBuildQueueList([]);
};


/**
 * repeated BuildItem production_queue = 3;
 * @return {!Array.<!proto.SC2APIProtocol.BuildItem>}
 */
proto.SC2APIProtocol.ProductionPanel.prototype.getProductionQueueList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.BuildItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.BuildItem, 3));
};


/** @param {!Array.<!proto.SC2APIProtocol.BuildItem>} value */
proto.SC2APIProtocol.ProductionPanel.prototype.setProductionQueueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SC2APIProtocol.BuildItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.BuildItem}
 */
proto.SC2APIProtocol.ProductionPanel.prototype.addProductionQueue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SC2APIProtocol.BuildItem, opt_index);
};


proto.SC2APIProtocol.ProductionPanel.prototype.clearProductionQueueList = function() {
  this.setProductionQueueList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionUI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SC2APIProtocol.ActionUI.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.ActionUI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionUI.displayName = 'proto.SC2APIProtocol.ActionUI';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.ActionUI.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.ActionUI.ActionCase = {
  ACTION_NOT_SET: 0,
  CONTROL_GROUP: 1,
  SELECT_ARMY: 2,
  SELECT_WARP_GATES: 3,
  SELECT_LARVA: 4,
  SELECT_IDLE_WORKER: 5,
  MULTI_PANEL: 6,
  CARGO_PANEL: 7,
  PRODUCTION_PANEL: 8,
  TOGGLE_AUTOCAST: 9
};

/**
 * @return {proto.SC2APIProtocol.ActionUI.ActionCase}
 */
proto.SC2APIProtocol.ActionUI.prototype.getActionCase = function() {
  return /** @type {proto.SC2APIProtocol.ActionUI.ActionCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.ActionUI.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionUI.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionUI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionUI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionUI.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlGroup: (f = msg.getControlGroup()) && proto.SC2APIProtocol.ActionControlGroup.toObject(includeInstance, f),
    selectArmy: (f = msg.getSelectArmy()) && proto.SC2APIProtocol.ActionSelectArmy.toObject(includeInstance, f),
    selectWarpGates: (f = msg.getSelectWarpGates()) && proto.SC2APIProtocol.ActionSelectWarpGates.toObject(includeInstance, f),
    selectLarva: (f = msg.getSelectLarva()) && proto.SC2APIProtocol.ActionSelectLarva.toObject(includeInstance, f),
    selectIdleWorker: (f = msg.getSelectIdleWorker()) && proto.SC2APIProtocol.ActionSelectIdleWorker.toObject(includeInstance, f),
    multiPanel: (f = msg.getMultiPanel()) && proto.SC2APIProtocol.ActionMultiPanel.toObject(includeInstance, f),
    cargoPanel: (f = msg.getCargoPanel()) && proto.SC2APIProtocol.ActionCargoPanelUnload.toObject(includeInstance, f),
    productionPanel: (f = msg.getProductionPanel()) && proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.toObject(includeInstance, f),
    toggleAutocast: (f = msg.getToggleAutocast()) && proto.SC2APIProtocol.ActionToggleAutocast.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionUI}
 */
proto.SC2APIProtocol.ActionUI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionUI;
  return proto.SC2APIProtocol.ActionUI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionUI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionUI}
 */
proto.SC2APIProtocol.ActionUI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.ActionControlGroup;
      reader.readMessage(value,proto.SC2APIProtocol.ActionControlGroup.deserializeBinaryFromReader);
      msg.setControlGroup(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.ActionSelectArmy;
      reader.readMessage(value,proto.SC2APIProtocol.ActionSelectArmy.deserializeBinaryFromReader);
      msg.setSelectArmy(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.ActionSelectWarpGates;
      reader.readMessage(value,proto.SC2APIProtocol.ActionSelectWarpGates.deserializeBinaryFromReader);
      msg.setSelectWarpGates(value);
      break;
    case 4:
      var value = new proto.SC2APIProtocol.ActionSelectLarva;
      reader.readMessage(value,proto.SC2APIProtocol.ActionSelectLarva.deserializeBinaryFromReader);
      msg.setSelectLarva(value);
      break;
    case 5:
      var value = new proto.SC2APIProtocol.ActionSelectIdleWorker;
      reader.readMessage(value,proto.SC2APIProtocol.ActionSelectIdleWorker.deserializeBinaryFromReader);
      msg.setSelectIdleWorker(value);
      break;
    case 6:
      var value = new proto.SC2APIProtocol.ActionMultiPanel;
      reader.readMessage(value,proto.SC2APIProtocol.ActionMultiPanel.deserializeBinaryFromReader);
      msg.setMultiPanel(value);
      break;
    case 7:
      var value = new proto.SC2APIProtocol.ActionCargoPanelUnload;
      reader.readMessage(value,proto.SC2APIProtocol.ActionCargoPanelUnload.deserializeBinaryFromReader);
      msg.setCargoPanel(value);
      break;
    case 8:
      var value = new proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue;
      reader.readMessage(value,proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.deserializeBinaryFromReader);
      msg.setProductionPanel(value);
      break;
    case 9:
      var value = new proto.SC2APIProtocol.ActionToggleAutocast;
      reader.readMessage(value,proto.SC2APIProtocol.ActionToggleAutocast.deserializeBinaryFromReader);
      msg.setToggleAutocast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionUI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionUI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionUI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionUI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.ActionControlGroup.serializeBinaryToWriter
    );
  }
  f = message.getSelectArmy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SC2APIProtocol.ActionSelectArmy.serializeBinaryToWriter
    );
  }
  f = message.getSelectWarpGates();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SC2APIProtocol.ActionSelectWarpGates.serializeBinaryToWriter
    );
  }
  f = message.getSelectLarva();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SC2APIProtocol.ActionSelectLarva.serializeBinaryToWriter
    );
  }
  f = message.getSelectIdleWorker();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SC2APIProtocol.ActionSelectIdleWorker.serializeBinaryToWriter
    );
  }
  f = message.getMultiPanel();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SC2APIProtocol.ActionMultiPanel.serializeBinaryToWriter
    );
  }
  f = message.getCargoPanel();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.SC2APIProtocol.ActionCargoPanelUnload.serializeBinaryToWriter
    );
  }
  f = message.getProductionPanel();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.serializeBinaryToWriter
    );
  }
  f = message.getToggleAutocast();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.SC2APIProtocol.ActionToggleAutocast.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActionControlGroup control_group = 1;
 * @return {?proto.SC2APIProtocol.ActionControlGroup}
 */
proto.SC2APIProtocol.ActionUI.prototype.getControlGroup = function() {
  return /** @type{?proto.SC2APIProtocol.ActionControlGroup} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionControlGroup, 1));
};


/** @param {?proto.SC2APIProtocol.ActionControlGroup|undefined} value */
proto.SC2APIProtocol.ActionUI.prototype.setControlGroup = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.SC2APIProtocol.ActionUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionUI.prototype.clearControlGroup = function() {
  this.setControlGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionUI.prototype.hasControlGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ActionSelectArmy select_army = 2;
 * @return {?proto.SC2APIProtocol.ActionSelectArmy}
 */
proto.SC2APIProtocol.ActionUI.prototype.getSelectArmy = function() {
  return /** @type{?proto.SC2APIProtocol.ActionSelectArmy} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionSelectArmy, 2));
};


/** @param {?proto.SC2APIProtocol.ActionSelectArmy|undefined} value */
proto.SC2APIProtocol.ActionUI.prototype.setSelectArmy = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SC2APIProtocol.ActionUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionUI.prototype.clearSelectArmy = function() {
  this.setSelectArmy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionUI.prototype.hasSelectArmy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ActionSelectWarpGates select_warp_gates = 3;
 * @return {?proto.SC2APIProtocol.ActionSelectWarpGates}
 */
proto.SC2APIProtocol.ActionUI.prototype.getSelectWarpGates = function() {
  return /** @type{?proto.SC2APIProtocol.ActionSelectWarpGates} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionSelectWarpGates, 3));
};


/** @param {?proto.SC2APIProtocol.ActionSelectWarpGates|undefined} value */
proto.SC2APIProtocol.ActionUI.prototype.setSelectWarpGates = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.SC2APIProtocol.ActionUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionUI.prototype.clearSelectWarpGates = function() {
  this.setSelectWarpGates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionUI.prototype.hasSelectWarpGates = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ActionSelectLarva select_larva = 4;
 * @return {?proto.SC2APIProtocol.ActionSelectLarva}
 */
proto.SC2APIProtocol.ActionUI.prototype.getSelectLarva = function() {
  return /** @type{?proto.SC2APIProtocol.ActionSelectLarva} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionSelectLarva, 4));
};


/** @param {?proto.SC2APIProtocol.ActionSelectLarva|undefined} value */
proto.SC2APIProtocol.ActionUI.prototype.setSelectLarva = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.SC2APIProtocol.ActionUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionUI.prototype.clearSelectLarva = function() {
  this.setSelectLarva(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionUI.prototype.hasSelectLarva = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ActionSelectIdleWorker select_idle_worker = 5;
 * @return {?proto.SC2APIProtocol.ActionSelectIdleWorker}
 */
proto.SC2APIProtocol.ActionUI.prototype.getSelectIdleWorker = function() {
  return /** @type{?proto.SC2APIProtocol.ActionSelectIdleWorker} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionSelectIdleWorker, 5));
};


/** @param {?proto.SC2APIProtocol.ActionSelectIdleWorker|undefined} value */
proto.SC2APIProtocol.ActionUI.prototype.setSelectIdleWorker = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.SC2APIProtocol.ActionUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionUI.prototype.clearSelectIdleWorker = function() {
  this.setSelectIdleWorker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionUI.prototype.hasSelectIdleWorker = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ActionMultiPanel multi_panel = 6;
 * @return {?proto.SC2APIProtocol.ActionMultiPanel}
 */
proto.SC2APIProtocol.ActionUI.prototype.getMultiPanel = function() {
  return /** @type{?proto.SC2APIProtocol.ActionMultiPanel} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionMultiPanel, 6));
};


/** @param {?proto.SC2APIProtocol.ActionMultiPanel|undefined} value */
proto.SC2APIProtocol.ActionUI.prototype.setMultiPanel = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.SC2APIProtocol.ActionUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionUI.prototype.clearMultiPanel = function() {
  this.setMultiPanel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionUI.prototype.hasMultiPanel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ActionCargoPanelUnload cargo_panel = 7;
 * @return {?proto.SC2APIProtocol.ActionCargoPanelUnload}
 */
proto.SC2APIProtocol.ActionUI.prototype.getCargoPanel = function() {
  return /** @type{?proto.SC2APIProtocol.ActionCargoPanelUnload} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionCargoPanelUnload, 7));
};


/** @param {?proto.SC2APIProtocol.ActionCargoPanelUnload|undefined} value */
proto.SC2APIProtocol.ActionUI.prototype.setCargoPanel = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.SC2APIProtocol.ActionUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionUI.prototype.clearCargoPanel = function() {
  this.setCargoPanel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionUI.prototype.hasCargoPanel = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ActionProductionPanelRemoveFromQueue production_panel = 8;
 * @return {?proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue}
 */
proto.SC2APIProtocol.ActionUI.prototype.getProductionPanel = function() {
  return /** @type{?proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue, 8));
};


/** @param {?proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue|undefined} value */
proto.SC2APIProtocol.ActionUI.prototype.setProductionPanel = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.SC2APIProtocol.ActionUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionUI.prototype.clearProductionPanel = function() {
  this.setProductionPanel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionUI.prototype.hasProductionPanel = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ActionToggleAutocast toggle_autocast = 9;
 * @return {?proto.SC2APIProtocol.ActionToggleAutocast}
 */
proto.SC2APIProtocol.ActionUI.prototype.getToggleAutocast = function() {
  return /** @type{?proto.SC2APIProtocol.ActionToggleAutocast} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionToggleAutocast, 9));
};


/** @param {?proto.SC2APIProtocol.ActionToggleAutocast|undefined} value */
proto.SC2APIProtocol.ActionUI.prototype.setToggleAutocast = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.SC2APIProtocol.ActionUI.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionUI.prototype.clearToggleAutocast = function() {
  this.setToggleAutocast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionUI.prototype.hasToggleAutocast = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionControlGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionControlGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionControlGroup.displayName = 'proto.SC2APIProtocol.ActionControlGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionControlGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionControlGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionControlGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionControlGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getField(msg, 1),
    controlGroupIndex: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionControlGroup}
 */
proto.SC2APIProtocol.ActionControlGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionControlGroup;
  return proto.SC2APIProtocol.ActionControlGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionControlGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionControlGroup}
 */
proto.SC2APIProtocol.ActionControlGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SC2APIProtocol.ActionControlGroup.ControlGroupAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setControlGroupIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionControlGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionControlGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionControlGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionControlGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SC2APIProtocol.ActionControlGroup.ControlGroupAction} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.ActionControlGroup.ControlGroupAction = {
  RECALL: 1,
  SET: 2,
  APPEND: 3,
  SETANDSTEAL: 4,
  APPENDANDSTEAL: 5
};

/**
 * optional ControlGroupAction action = 1;
 * @return {!proto.SC2APIProtocol.ActionControlGroup.ControlGroupAction}
 */
proto.SC2APIProtocol.ActionControlGroup.prototype.getAction = function() {
  return /** @type {!proto.SC2APIProtocol.ActionControlGroup.ControlGroupAction} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.SC2APIProtocol.ActionControlGroup.ControlGroupAction} value */
proto.SC2APIProtocol.ActionControlGroup.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionControlGroup.prototype.clearAction = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionControlGroup.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 control_group_index = 2;
 * @return {number}
 */
proto.SC2APIProtocol.ActionControlGroup.prototype.getControlGroupIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ActionControlGroup.prototype.setControlGroupIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.ActionControlGroup.prototype.clearControlGroupIndex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionControlGroup.prototype.hasControlGroupIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionSelectArmy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionSelectArmy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionSelectArmy.displayName = 'proto.SC2APIProtocol.ActionSelectArmy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionSelectArmy.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionSelectArmy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionSelectArmy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSelectArmy.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectionAdd: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionSelectArmy}
 */
proto.SC2APIProtocol.ActionSelectArmy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionSelectArmy;
  return proto.SC2APIProtocol.ActionSelectArmy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionSelectArmy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionSelectArmy}
 */
proto.SC2APIProtocol.ActionSelectArmy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelectionAdd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionSelectArmy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionSelectArmy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionSelectArmy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSelectArmy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool selection_add = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.ActionSelectArmy.prototype.getSelectionAdd = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.ActionSelectArmy.prototype.setSelectionAdd = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionSelectArmy.prototype.clearSelectionAdd = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSelectArmy.prototype.hasSelectionAdd = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionSelectWarpGates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionSelectWarpGates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionSelectWarpGates.displayName = 'proto.SC2APIProtocol.ActionSelectWarpGates';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionSelectWarpGates.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionSelectWarpGates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionSelectWarpGates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSelectWarpGates.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectionAdd: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionSelectWarpGates}
 */
proto.SC2APIProtocol.ActionSelectWarpGates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionSelectWarpGates;
  return proto.SC2APIProtocol.ActionSelectWarpGates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionSelectWarpGates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionSelectWarpGates}
 */
proto.SC2APIProtocol.ActionSelectWarpGates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelectionAdd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionSelectWarpGates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionSelectWarpGates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionSelectWarpGates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSelectWarpGates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool selection_add = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.ActionSelectWarpGates.prototype.getSelectionAdd = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.ActionSelectWarpGates.prototype.setSelectionAdd = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionSelectWarpGates.prototype.clearSelectionAdd = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSelectWarpGates.prototype.hasSelectionAdd = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionSelectLarva = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionSelectLarva, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionSelectLarva.displayName = 'proto.SC2APIProtocol.ActionSelectLarva';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionSelectLarva.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionSelectLarva.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionSelectLarva} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSelectLarva.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionSelectLarva}
 */
proto.SC2APIProtocol.ActionSelectLarva.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionSelectLarva;
  return proto.SC2APIProtocol.ActionSelectLarva.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionSelectLarva} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionSelectLarva}
 */
proto.SC2APIProtocol.ActionSelectLarva.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionSelectLarva.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionSelectLarva.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionSelectLarva} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSelectLarva.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionSelectIdleWorker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionSelectIdleWorker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionSelectIdleWorker.displayName = 'proto.SC2APIProtocol.ActionSelectIdleWorker';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionSelectIdleWorker.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionSelectIdleWorker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionSelectIdleWorker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSelectIdleWorker.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionSelectIdleWorker}
 */
proto.SC2APIProtocol.ActionSelectIdleWorker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionSelectIdleWorker;
  return proto.SC2APIProtocol.ActionSelectIdleWorker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionSelectIdleWorker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionSelectIdleWorker}
 */
proto.SC2APIProtocol.ActionSelectIdleWorker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SC2APIProtocol.ActionSelectIdleWorker.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionSelectIdleWorker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionSelectIdleWorker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionSelectIdleWorker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSelectIdleWorker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SC2APIProtocol.ActionSelectIdleWorker.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.ActionSelectIdleWorker.Type = {
  SET: 1,
  ADD: 2,
  ALL: 3,
  ADDALL: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.SC2APIProtocol.ActionSelectIdleWorker.Type}
 */
proto.SC2APIProtocol.ActionSelectIdleWorker.prototype.getType = function() {
  return /** @type {!proto.SC2APIProtocol.ActionSelectIdleWorker.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.SC2APIProtocol.ActionSelectIdleWorker.Type} value */
proto.SC2APIProtocol.ActionSelectIdleWorker.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionSelectIdleWorker.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSelectIdleWorker.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionMultiPanel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionMultiPanel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionMultiPanel.displayName = 'proto.SC2APIProtocol.ActionMultiPanel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionMultiPanel.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionMultiPanel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionMultiPanel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionMultiPanel.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    unitIndex: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionMultiPanel}
 */
proto.SC2APIProtocol.ActionMultiPanel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionMultiPanel;
  return proto.SC2APIProtocol.ActionMultiPanel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionMultiPanel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionMultiPanel}
 */
proto.SC2APIProtocol.ActionMultiPanel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SC2APIProtocol.ActionMultiPanel.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnitIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionMultiPanel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionMultiPanel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionMultiPanel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionMultiPanel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SC2APIProtocol.ActionMultiPanel.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.ActionMultiPanel.Type = {
  SINGLESELECT: 1,
  DESELECTUNIT: 2,
  SELECTALLOFTYPE: 3,
  DESELECTALLOFTYPE: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.SC2APIProtocol.ActionMultiPanel.Type}
 */
proto.SC2APIProtocol.ActionMultiPanel.prototype.getType = function() {
  return /** @type {!proto.SC2APIProtocol.ActionMultiPanel.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.SC2APIProtocol.ActionMultiPanel.Type} value */
proto.SC2APIProtocol.ActionMultiPanel.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionMultiPanel.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionMultiPanel.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 unit_index = 2;
 * @return {number}
 */
proto.SC2APIProtocol.ActionMultiPanel.prototype.getUnitIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ActionMultiPanel.prototype.setUnitIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.ActionMultiPanel.prototype.clearUnitIndex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionMultiPanel.prototype.hasUnitIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionCargoPanelUnload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionCargoPanelUnload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionCargoPanelUnload.displayName = 'proto.SC2APIProtocol.ActionCargoPanelUnload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionCargoPanelUnload.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionCargoPanelUnload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionCargoPanelUnload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionCargoPanelUnload.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitIndex: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionCargoPanelUnload}
 */
proto.SC2APIProtocol.ActionCargoPanelUnload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionCargoPanelUnload;
  return proto.SC2APIProtocol.ActionCargoPanelUnload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionCargoPanelUnload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionCargoPanelUnload}
 */
proto.SC2APIProtocol.ActionCargoPanelUnload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnitIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionCargoPanelUnload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionCargoPanelUnload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionCargoPanelUnload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionCargoPanelUnload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 unit_index = 1;
 * @return {number}
 */
proto.SC2APIProtocol.ActionCargoPanelUnload.prototype.getUnitIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ActionCargoPanelUnload.prototype.setUnitIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionCargoPanelUnload.prototype.clearUnitIndex = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionCargoPanelUnload.prototype.hasUnitIndex = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.displayName = 'proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitIndex: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue}
 */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue;
  return proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue}
 */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnitIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 unit_index = 1;
 * @return {number}
 */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.prototype.getUnitIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.prototype.setUnitIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.prototype.clearUnitIndex = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.prototype.hasUnitIndex = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionToggleAutocast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionToggleAutocast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionToggleAutocast.displayName = 'proto.SC2APIProtocol.ActionToggleAutocast';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionToggleAutocast.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionToggleAutocast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionToggleAutocast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionToggleAutocast.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityId: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionToggleAutocast}
 */
proto.SC2APIProtocol.ActionToggleAutocast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionToggleAutocast;
  return proto.SC2APIProtocol.ActionToggleAutocast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionToggleAutocast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionToggleAutocast}
 */
proto.SC2APIProtocol.ActionToggleAutocast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAbilityId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionToggleAutocast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionToggleAutocast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionToggleAutocast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionToggleAutocast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ability_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.ActionToggleAutocast.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ActionToggleAutocast.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionToggleAutocast.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionToggleAutocast.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.SC2APIProtocol);

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var s2clientprotocol_common_pb = require('../s2clientprotocol/common_pb.js');
goog.exportSymbol('proto.SC2APIProtocol.ActionSpatial', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSpatialCameraMove', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSpatialUnitCommand', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionSpatialUnitSelectionRect', null, global);
goog.exportSymbol('proto.SC2APIProtocol.FeatureLayers', null, global);
goog.exportSymbol('proto.SC2APIProtocol.FeatureLayersMinimap', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ObservationFeatureLayer', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ObservationRender', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ObservationFeatureLayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ObservationFeatureLayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ObservationFeatureLayer.displayName = 'proto.SC2APIProtocol.ObservationFeatureLayer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ObservationFeatureLayer.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ObservationFeatureLayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ObservationFeatureLayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ObservationFeatureLayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    renders: (f = msg.getRenders()) && proto.SC2APIProtocol.FeatureLayers.toObject(includeInstance, f),
    minimapRenders: (f = msg.getMinimapRenders()) && proto.SC2APIProtocol.FeatureLayersMinimap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ObservationFeatureLayer}
 */
proto.SC2APIProtocol.ObservationFeatureLayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ObservationFeatureLayer;
  return proto.SC2APIProtocol.ObservationFeatureLayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ObservationFeatureLayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ObservationFeatureLayer}
 */
proto.SC2APIProtocol.ObservationFeatureLayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.FeatureLayers;
      reader.readMessage(value,proto.SC2APIProtocol.FeatureLayers.deserializeBinaryFromReader);
      msg.setRenders(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.FeatureLayersMinimap;
      reader.readMessage(value,proto.SC2APIProtocol.FeatureLayersMinimap.deserializeBinaryFromReader);
      msg.setMinimapRenders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ObservationFeatureLayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ObservationFeatureLayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ObservationFeatureLayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ObservationFeatureLayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRenders();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.FeatureLayers.serializeBinaryToWriter
    );
  }
  f = message.getMinimapRenders();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SC2APIProtocol.FeatureLayersMinimap.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureLayers renders = 1;
 * @return {?proto.SC2APIProtocol.FeatureLayers}
 */
proto.SC2APIProtocol.ObservationFeatureLayer.prototype.getRenders = function() {
  return /** @type{?proto.SC2APIProtocol.FeatureLayers} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.FeatureLayers, 1));
};


/** @param {?proto.SC2APIProtocol.FeatureLayers|undefined} value */
proto.SC2APIProtocol.ObservationFeatureLayer.prototype.setRenders = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.ObservationFeatureLayer.prototype.clearRenders = function() {
  this.setRenders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationFeatureLayer.prototype.hasRenders = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeatureLayersMinimap minimap_renders = 2;
 * @return {?proto.SC2APIProtocol.FeatureLayersMinimap}
 */
proto.SC2APIProtocol.ObservationFeatureLayer.prototype.getMinimapRenders = function() {
  return /** @type{?proto.SC2APIProtocol.FeatureLayersMinimap} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.FeatureLayersMinimap, 2));
};


/** @param {?proto.SC2APIProtocol.FeatureLayersMinimap|undefined} value */
proto.SC2APIProtocol.ObservationFeatureLayer.prototype.setMinimapRenders = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SC2APIProtocol.ObservationFeatureLayer.prototype.clearMinimapRenders = function() {
  this.setMinimapRenders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationFeatureLayer.prototype.hasMinimapRenders = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.FeatureLayers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.FeatureLayers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.FeatureLayers.displayName = 'proto.SC2APIProtocol.FeatureLayers';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.FeatureLayers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.FeatureLayers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.FeatureLayers.toObject = function(includeInstance, msg) {
  var f, obj = {
    heightMap: (f = msg.getHeightMap()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    visibilityMap: (f = msg.getVisibilityMap()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    creep: (f = msg.getCreep()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    power: (f = msg.getPower()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    playerId: (f = msg.getPlayerId()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitType: (f = msg.getUnitType()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    selected: (f = msg.getSelected()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitHitPoints: (f = msg.getUnitHitPoints()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitHitPointsRatio: (f = msg.getUnitHitPointsRatio()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitEnergy: (f = msg.getUnitEnergy()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitEnergyRatio: (f = msg.getUnitEnergyRatio()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitShields: (f = msg.getUnitShields()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitShieldsRatio: (f = msg.getUnitShieldsRatio()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    playerRelative: (f = msg.getPlayerRelative()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitDensityAa: (f = msg.getUnitDensityAa()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitDensity: (f = msg.getUnitDensity()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    effects: (f = msg.getEffects()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    hallucinations: (f = msg.getHallucinations()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    cloaked: (f = msg.getCloaked()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    blip: (f = msg.getBlip()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    buffs: (f = msg.getBuffs()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    buffDuration: (f = msg.getBuffDuration()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    active: (f = msg.getActive()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    buildProgress: (f = msg.getBuildProgress()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    buildable: (f = msg.getBuildable()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    pathable: (f = msg.getPathable()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    placeholder: (f = msg.getPlaceholder()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.FeatureLayers}
 */
proto.SC2APIProtocol.FeatureLayers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.FeatureLayers;
  return proto.SC2APIProtocol.FeatureLayers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.FeatureLayers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.FeatureLayers}
 */
proto.SC2APIProtocol.FeatureLayers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setHeightMap(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setVisibilityMap(value);
      break;
    case 3:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setCreep(value);
      break;
    case 4:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPower(value);
      break;
    case 5:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPlayerId(value);
      break;
    case 6:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitType(value);
      break;
    case 7:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setSelected(value);
      break;
    case 8:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitHitPoints(value);
      break;
    case 17:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitHitPointsRatio(value);
      break;
    case 9:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitEnergy(value);
      break;
    case 18:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitEnergyRatio(value);
      break;
    case 10:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitShields(value);
      break;
    case 19:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitShieldsRatio(value);
      break;
    case 11:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPlayerRelative(value);
      break;
    case 14:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitDensityAa(value);
      break;
    case 15:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitDensity(value);
      break;
    case 20:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setEffects(value);
      break;
    case 21:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setHallucinations(value);
      break;
    case 22:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setCloaked(value);
      break;
    case 23:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setBlip(value);
      break;
    case 24:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setBuffs(value);
      break;
    case 26:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setBuffDuration(value);
      break;
    case 25:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setActive(value);
      break;
    case 27:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setBuildProgress(value);
      break;
    case 28:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setBuildable(value);
      break;
    case 29:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPathable(value);
      break;
    case 30:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPlaceholder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.FeatureLayers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.FeatureLayers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.FeatureLayers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeightMap();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getVisibilityMap();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getCreep();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPower();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPlayerId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitType();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getSelected();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitHitPoints();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitHitPointsRatio();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitEnergy();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitEnergyRatio();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitShields();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitShieldsRatio();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPlayerRelative();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitDensityAa();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitDensity();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getEffects();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getHallucinations();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getCloaked();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getBlip();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getBuffs();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getBuffDuration();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getBuildProgress();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getBuildable();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPathable();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPlaceholder();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageData height_map = 1;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getHeightMap = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 1));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setHeightMap = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearHeightMap = function() {
  this.setHeightMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasHeightMap = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageData visibility_map = 2;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getVisibilityMap = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 2));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setVisibilityMap = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearVisibilityMap = function() {
  this.setVisibilityMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasVisibilityMap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ImageData creep = 3;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getCreep = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 3));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setCreep = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearCreep = function() {
  this.setCreep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasCreep = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ImageData power = 4;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getPower = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 4));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setPower = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearPower = function() {
  this.setPower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasPower = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ImageData player_id = 5;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getPlayerId = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 5));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setPlayerId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearPlayerId = function() {
  this.setPlayerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasPlayerId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ImageData unit_type = 6;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getUnitType = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 6));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setUnitType = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearUnitType = function() {
  this.setUnitType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasUnitType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ImageData selected = 7;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getSelected = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 7));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setSelected = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearSelected = function() {
  this.setSelected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasSelected = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ImageData unit_hit_points = 8;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getUnitHitPoints = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 8));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setUnitHitPoints = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearUnitHitPoints = function() {
  this.setUnitHitPoints(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasUnitHitPoints = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ImageData unit_hit_points_ratio = 17;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getUnitHitPointsRatio = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 17));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setUnitHitPointsRatio = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearUnitHitPointsRatio = function() {
  this.setUnitHitPointsRatio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasUnitHitPointsRatio = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional ImageData unit_energy = 9;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getUnitEnergy = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 9));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setUnitEnergy = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearUnitEnergy = function() {
  this.setUnitEnergy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasUnitEnergy = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ImageData unit_energy_ratio = 18;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getUnitEnergyRatio = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 18));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setUnitEnergyRatio = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearUnitEnergyRatio = function() {
  this.setUnitEnergyRatio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasUnitEnergyRatio = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ImageData unit_shields = 10;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getUnitShields = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 10));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setUnitShields = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearUnitShields = function() {
  this.setUnitShields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasUnitShields = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ImageData unit_shields_ratio = 19;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getUnitShieldsRatio = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 19));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setUnitShieldsRatio = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearUnitShieldsRatio = function() {
  this.setUnitShieldsRatio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasUnitShieldsRatio = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ImageData player_relative = 11;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getPlayerRelative = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 11));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setPlayerRelative = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearPlayerRelative = function() {
  this.setPlayerRelative(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasPlayerRelative = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ImageData unit_density_aa = 14;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getUnitDensityAa = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 14));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setUnitDensityAa = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearUnitDensityAa = function() {
  this.setUnitDensityAa(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasUnitDensityAa = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ImageData unit_density = 15;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getUnitDensity = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 15));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setUnitDensity = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearUnitDensity = function() {
  this.setUnitDensity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasUnitDensity = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ImageData effects = 20;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getEffects = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 20));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setEffects = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearEffects = function() {
  this.setEffects(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasEffects = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ImageData hallucinations = 21;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getHallucinations = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 21));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setHallucinations = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearHallucinations = function() {
  this.setHallucinations(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasHallucinations = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional ImageData cloaked = 22;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getCloaked = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 22));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setCloaked = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearCloaked = function() {
  this.setCloaked(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasCloaked = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional ImageData blip = 23;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getBlip = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 23));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setBlip = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearBlip = function() {
  this.setBlip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasBlip = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional ImageData buffs = 24;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getBuffs = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 24));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setBuffs = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearBuffs = function() {
  this.setBuffs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasBuffs = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional ImageData buff_duration = 26;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getBuffDuration = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 26));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setBuffDuration = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearBuffDuration = function() {
  this.setBuffDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasBuffDuration = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional ImageData active = 25;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getActive = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 25));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setActive = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearActive = function() {
  this.setActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasActive = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional ImageData build_progress = 27;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getBuildProgress = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 27));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setBuildProgress = function(value) {
  jspb.Message.setWrapperField(this, 27, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearBuildProgress = function() {
  this.setBuildProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasBuildProgress = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional ImageData buildable = 28;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getBuildable = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 28));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setBuildable = function(value) {
  jspb.Message.setWrapperField(this, 28, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearBuildable = function() {
  this.setBuildable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasBuildable = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional ImageData pathable = 29;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getPathable = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 29));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setPathable = function(value) {
  jspb.Message.setWrapperField(this, 29, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearPathable = function() {
  this.setPathable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasPathable = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional ImageData placeholder = 30;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.getPlaceholder = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 30));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayers.prototype.setPlaceholder = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.SC2APIProtocol.FeatureLayers.prototype.clearPlaceholder = function() {
  this.setPlaceholder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayers.prototype.hasPlaceholder = function() {
  return jspb.Message.getField(this, 30) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.FeatureLayersMinimap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.FeatureLayersMinimap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.FeatureLayersMinimap.displayName = 'proto.SC2APIProtocol.FeatureLayersMinimap';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.FeatureLayersMinimap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.FeatureLayersMinimap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.FeatureLayersMinimap.toObject = function(includeInstance, msg) {
  var f, obj = {
    heightMap: (f = msg.getHeightMap()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    visibilityMap: (f = msg.getVisibilityMap()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    creep: (f = msg.getCreep()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    camera: (f = msg.getCamera()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    playerId: (f = msg.getPlayerId()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    playerRelative: (f = msg.getPlayerRelative()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    selected: (f = msg.getSelected()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    alerts: (f = msg.getAlerts()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    buildable: (f = msg.getBuildable()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    pathable: (f = msg.getPathable()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    unitType: (f = msg.getUnitType()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.FeatureLayersMinimap}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.FeatureLayersMinimap;
  return proto.SC2APIProtocol.FeatureLayersMinimap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.FeatureLayersMinimap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.FeatureLayersMinimap}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setHeightMap(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setVisibilityMap(value);
      break;
    case 3:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setCreep(value);
      break;
    case 4:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setCamera(value);
      break;
    case 5:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPlayerId(value);
      break;
    case 6:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPlayerRelative(value);
      break;
    case 7:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setSelected(value);
      break;
    case 9:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setAlerts(value);
      break;
    case 10:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setBuildable(value);
      break;
    case 11:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPathable(value);
      break;
    case 8:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setUnitType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.FeatureLayersMinimap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.FeatureLayersMinimap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.FeatureLayersMinimap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeightMap();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getVisibilityMap();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getCreep();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getCamera();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPlayerId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPlayerRelative();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getSelected();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getAlerts();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getBuildable();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPathable();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getUnitType();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageData height_map = 1;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getHeightMap = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 1));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setHeightMap = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearHeightMap = function() {
  this.setHeightMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasHeightMap = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageData visibility_map = 2;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getVisibilityMap = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 2));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setVisibilityMap = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearVisibilityMap = function() {
  this.setVisibilityMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasVisibilityMap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ImageData creep = 3;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getCreep = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 3));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setCreep = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearCreep = function() {
  this.setCreep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasCreep = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ImageData camera = 4;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getCamera = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 4));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setCamera = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearCamera = function() {
  this.setCamera(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ImageData player_id = 5;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getPlayerId = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 5));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setPlayerId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearPlayerId = function() {
  this.setPlayerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasPlayerId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ImageData player_relative = 6;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getPlayerRelative = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 6));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setPlayerRelative = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearPlayerRelative = function() {
  this.setPlayerRelative(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasPlayerRelative = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ImageData selected = 7;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getSelected = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 7));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setSelected = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearSelected = function() {
  this.setSelected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasSelected = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ImageData alerts = 9;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getAlerts = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 9));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setAlerts = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearAlerts = function() {
  this.setAlerts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasAlerts = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ImageData buildable = 10;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getBuildable = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 10));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setBuildable = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearBuildable = function() {
  this.setBuildable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasBuildable = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ImageData pathable = 11;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getPathable = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 11));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setPathable = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearPathable = function() {
  this.setPathable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasPathable = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ImageData unit_type = 8;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.getUnitType = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 8));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.setUnitType = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.SC2APIProtocol.FeatureLayersMinimap.prototype.clearUnitType = function() {
  this.setUnitType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.FeatureLayersMinimap.prototype.hasUnitType = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ObservationRender = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ObservationRender, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ObservationRender.displayName = 'proto.SC2APIProtocol.ObservationRender';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ObservationRender.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ObservationRender.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ObservationRender} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ObservationRender.toObject = function(includeInstance, msg) {
  var f, obj = {
    map: (f = msg.getMap()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    minimap: (f = msg.getMinimap()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ObservationRender}
 */
proto.SC2APIProtocol.ObservationRender.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ObservationRender;
  return proto.SC2APIProtocol.ObservationRender.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ObservationRender} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ObservationRender}
 */
proto.SC2APIProtocol.ObservationRender.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setMinimap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ObservationRender.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ObservationRender.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ObservationRender} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ObservationRender.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getMinimap();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageData map = 1;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.ObservationRender.prototype.getMap = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 1));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.ObservationRender.prototype.setMap = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.ObservationRender.prototype.clearMap = function() {
  this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationRender.prototype.hasMap = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageData minimap = 2;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.ObservationRender.prototype.getMinimap = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 2));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.ObservationRender.prototype.setMinimap = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SC2APIProtocol.ObservationRender.prototype.clearMinimap = function() {
  this.setMinimap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationRender.prototype.hasMinimap = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionSpatial = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SC2APIProtocol.ActionSpatial.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.ActionSpatial, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionSpatial.displayName = 'proto.SC2APIProtocol.ActionSpatial';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.ActionSpatial.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.ActionSpatial.ActionCase = {
  ACTION_NOT_SET: 0,
  UNIT_COMMAND: 1,
  CAMERA_MOVE: 2,
  UNIT_SELECTION_POINT: 3,
  UNIT_SELECTION_RECT: 4
};

/**
 * @return {proto.SC2APIProtocol.ActionSpatial.ActionCase}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.getActionCase = function() {
  return /** @type {proto.SC2APIProtocol.ActionSpatial.ActionCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.ActionSpatial.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionSpatial.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionSpatial} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatial.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitCommand: (f = msg.getUnitCommand()) && proto.SC2APIProtocol.ActionSpatialUnitCommand.toObject(includeInstance, f),
    cameraMove: (f = msg.getCameraMove()) && proto.SC2APIProtocol.ActionSpatialCameraMove.toObject(includeInstance, f),
    unitSelectionPoint: (f = msg.getUnitSelectionPoint()) && proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.toObject(includeInstance, f),
    unitSelectionRect: (f = msg.getUnitSelectionRect()) && proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionSpatial}
 */
proto.SC2APIProtocol.ActionSpatial.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionSpatial;
  return proto.SC2APIProtocol.ActionSpatial.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionSpatial} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionSpatial}
 */
proto.SC2APIProtocol.ActionSpatial.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.ActionSpatialUnitCommand;
      reader.readMessage(value,proto.SC2APIProtocol.ActionSpatialUnitCommand.deserializeBinaryFromReader);
      msg.setUnitCommand(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.ActionSpatialCameraMove;
      reader.readMessage(value,proto.SC2APIProtocol.ActionSpatialCameraMove.deserializeBinaryFromReader);
      msg.setCameraMove(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint;
      reader.readMessage(value,proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.deserializeBinaryFromReader);
      msg.setUnitSelectionPoint(value);
      break;
    case 4:
      var value = new proto.SC2APIProtocol.ActionSpatialUnitSelectionRect;
      reader.readMessage(value,proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.deserializeBinaryFromReader);
      msg.setUnitSelectionRect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionSpatial.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionSpatial} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatial.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.ActionSpatialUnitCommand.serializeBinaryToWriter
    );
  }
  f = message.getCameraMove();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SC2APIProtocol.ActionSpatialCameraMove.serializeBinaryToWriter
    );
  }
  f = message.getUnitSelectionPoint();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.serializeBinaryToWriter
    );
  }
  f = message.getUnitSelectionRect();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActionSpatialUnitCommand unit_command = 1;
 * @return {?proto.SC2APIProtocol.ActionSpatialUnitCommand}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.getUnitCommand = function() {
  return /** @type{?proto.SC2APIProtocol.ActionSpatialUnitCommand} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionSpatialUnitCommand, 1));
};


/** @param {?proto.SC2APIProtocol.ActionSpatialUnitCommand|undefined} value */
proto.SC2APIProtocol.ActionSpatial.prototype.setUnitCommand = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.SC2APIProtocol.ActionSpatial.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionSpatial.prototype.clearUnitCommand = function() {
  this.setUnitCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.hasUnitCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ActionSpatialCameraMove camera_move = 2;
 * @return {?proto.SC2APIProtocol.ActionSpatialCameraMove}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.getCameraMove = function() {
  return /** @type{?proto.SC2APIProtocol.ActionSpatialCameraMove} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionSpatialCameraMove, 2));
};


/** @param {?proto.SC2APIProtocol.ActionSpatialCameraMove|undefined} value */
proto.SC2APIProtocol.ActionSpatial.prototype.setCameraMove = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SC2APIProtocol.ActionSpatial.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionSpatial.prototype.clearCameraMove = function() {
  this.setCameraMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.hasCameraMove = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ActionSpatialUnitSelectionPoint unit_selection_point = 3;
 * @return {?proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.getUnitSelectionPoint = function() {
  return /** @type{?proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint, 3));
};


/** @param {?proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint|undefined} value */
proto.SC2APIProtocol.ActionSpatial.prototype.setUnitSelectionPoint = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.SC2APIProtocol.ActionSpatial.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionSpatial.prototype.clearUnitSelectionPoint = function() {
  this.setUnitSelectionPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.hasUnitSelectionPoint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ActionSpatialUnitSelectionRect unit_selection_rect = 4;
 * @return {?proto.SC2APIProtocol.ActionSpatialUnitSelectionRect}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.getUnitSelectionRect = function() {
  return /** @type{?proto.SC2APIProtocol.ActionSpatialUnitSelectionRect} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionSpatialUnitSelectionRect, 4));
};


/** @param {?proto.SC2APIProtocol.ActionSpatialUnitSelectionRect|undefined} value */
proto.SC2APIProtocol.ActionSpatial.prototype.setUnitSelectionRect = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.SC2APIProtocol.ActionSpatial.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionSpatial.prototype.clearUnitSelectionRect = function() {
  this.setUnitSelectionRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatial.prototype.hasUnitSelectionRect = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SC2APIProtocol.ActionSpatialUnitCommand.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.ActionSpatialUnitCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionSpatialUnitCommand.displayName = 'proto.SC2APIProtocol.ActionSpatialUnitCommand';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.TargetCase = {
  TARGET_NOT_SET: 0,
  TARGET_SCREEN_COORD: 2,
  TARGET_MINIMAP_COORD: 3
};

/**
 * @return {proto.SC2APIProtocol.ActionSpatialUnitCommand.TargetCase}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.getTargetCase = function() {
  return /** @type {proto.SC2APIProtocol.ActionSpatialUnitCommand.TargetCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.ActionSpatialUnitCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionSpatialUnitCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionSpatialUnitCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityId: jspb.Message.getField(msg, 1),
    targetScreenCoord: (f = msg.getTargetScreenCoord()) && s2clientprotocol_common_pb.PointI.toObject(includeInstance, f),
    targetMinimapCoord: (f = msg.getTargetMinimapCoord()) && s2clientprotocol_common_pb.PointI.toObject(includeInstance, f),
    queueCommand: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionSpatialUnitCommand}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionSpatialUnitCommand;
  return proto.SC2APIProtocol.ActionSpatialUnitCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionSpatialUnitCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionSpatialUnitCommand}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAbilityId(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.PointI;
      reader.readMessage(value,s2clientprotocol_common_pb.PointI.deserializeBinaryFromReader);
      msg.setTargetScreenCoord(value);
      break;
    case 3:
      var value = new s2clientprotocol_common_pb.PointI;
      reader.readMessage(value,s2clientprotocol_common_pb.PointI.deserializeBinaryFromReader);
      msg.setTargetMinimapCoord(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQueueCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionSpatialUnitCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionSpatialUnitCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTargetScreenCoord();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.PointI.serializeBinaryToWriter
    );
  }
  f = message.getTargetMinimapCoord();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      s2clientprotocol_common_pb.PointI.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 ability_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PointI target_screen_coord = 2;
 * @return {?proto.SC2APIProtocol.PointI}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.getTargetScreenCoord = function() {
  return /** @type{?proto.SC2APIProtocol.PointI} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.PointI, 2));
};


/** @param {?proto.SC2APIProtocol.PointI|undefined} value */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.setTargetScreenCoord = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SC2APIProtocol.ActionSpatialUnitCommand.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.clearTargetScreenCoord = function() {
  this.setTargetScreenCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.hasTargetScreenCoord = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PointI target_minimap_coord = 3;
 * @return {?proto.SC2APIProtocol.PointI}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.getTargetMinimapCoord = function() {
  return /** @type{?proto.SC2APIProtocol.PointI} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.PointI, 3));
};


/** @param {?proto.SC2APIProtocol.PointI|undefined} value */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.setTargetMinimapCoord = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.SC2APIProtocol.ActionSpatialUnitCommand.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.clearTargetMinimapCoord = function() {
  this.setTargetMinimapCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.hasTargetMinimapCoord = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool queue_command = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.getQueueCommand = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.setQueueCommand = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.clearQueueCommand = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatialUnitCommand.prototype.hasQueueCommand = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionSpatialCameraMove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionSpatialCameraMove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionSpatialCameraMove.displayName = 'proto.SC2APIProtocol.ActionSpatialCameraMove';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionSpatialCameraMove.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionSpatialCameraMove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionSpatialCameraMove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatialCameraMove.toObject = function(includeInstance, msg) {
  var f, obj = {
    centerMinimap: (f = msg.getCenterMinimap()) && s2clientprotocol_common_pb.PointI.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionSpatialCameraMove}
 */
proto.SC2APIProtocol.ActionSpatialCameraMove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionSpatialCameraMove;
  return proto.SC2APIProtocol.ActionSpatialCameraMove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionSpatialCameraMove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionSpatialCameraMove}
 */
proto.SC2APIProtocol.ActionSpatialCameraMove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.PointI;
      reader.readMessage(value,s2clientprotocol_common_pb.PointI.deserializeBinaryFromReader);
      msg.setCenterMinimap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionSpatialCameraMove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionSpatialCameraMove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionSpatialCameraMove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatialCameraMove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenterMinimap();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.PointI.serializeBinaryToWriter
    );
  }
};


/**
 * optional PointI center_minimap = 1;
 * @return {?proto.SC2APIProtocol.PointI}
 */
proto.SC2APIProtocol.ActionSpatialCameraMove.prototype.getCenterMinimap = function() {
  return /** @type{?proto.SC2APIProtocol.PointI} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.PointI, 1));
};


/** @param {?proto.SC2APIProtocol.PointI|undefined} value */
proto.SC2APIProtocol.ActionSpatialCameraMove.prototype.setCenterMinimap = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.ActionSpatialCameraMove.prototype.clearCenterMinimap = function() {
  this.setCenterMinimap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatialCameraMove.prototype.hasCenterMinimap = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.displayName = 'proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectionScreenCoord: (f = msg.getSelectionScreenCoord()) && s2clientprotocol_common_pb.PointI.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint;
  return proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.PointI;
      reader.readMessage(value,s2clientprotocol_common_pb.PointI.deserializeBinaryFromReader);
      msg.setSelectionScreenCoord(value);
      break;
    case 2:
      var value = /** @type {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionScreenCoord();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.PointI.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type = {
  SELECT: 1,
  TOGGLE: 2,
  ALLTYPE: 3,
  ADDALLTYPE: 4
};

/**
 * optional PointI selection_screen_coord = 1;
 * @return {?proto.SC2APIProtocol.PointI}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.getSelectionScreenCoord = function() {
  return /** @type{?proto.SC2APIProtocol.PointI} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.PointI, 1));
};


/** @param {?proto.SC2APIProtocol.PointI|undefined} value */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.setSelectionScreenCoord = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.clearSelectionScreenCoord = function() {
  this.setSelectionScreenCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.hasSelectionScreenCoord = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.getType = function() {
  return /** @type {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type} value */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionPoint.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.ActionSpatialUnitSelectionRect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.displayName = 'proto.SC2APIProtocol.ActionSpatialUnitSelectionRect';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionSpatialUnitSelectionRect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectionScreenCoordList: jspb.Message.toObjectList(msg.getSelectionScreenCoordList(),
    s2clientprotocol_common_pb.RectangleI.toObject, includeInstance),
    selectionAdd: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionSpatialUnitSelectionRect}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionSpatialUnitSelectionRect;
  return proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionSpatialUnitSelectionRect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionSpatialUnitSelectionRect}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.RectangleI;
      reader.readMessage(value,s2clientprotocol_common_pb.RectangleI.deserializeBinaryFromReader);
      msg.addSelectionScreenCoord(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelectionAdd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionSpatialUnitSelectionRect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionScreenCoordList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      s2clientprotocol_common_pb.RectangleI.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated RectangleI selection_screen_coord = 1;
 * @return {!Array.<!proto.SC2APIProtocol.RectangleI>}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.getSelectionScreenCoordList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.RectangleI>} */ (
    jspb.Message.getRepeatedWrapperField(this, s2clientprotocol_common_pb.RectangleI, 1));
};


/** @param {!Array.<!proto.SC2APIProtocol.RectangleI>} value */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.setSelectionScreenCoordList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SC2APIProtocol.RectangleI=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.RectangleI}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.addSelectionScreenCoord = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SC2APIProtocol.RectangleI, opt_index);
};


proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.clearSelectionScreenCoordList = function() {
  this.setSelectionScreenCoordList([]);
};


/**
 * optional bool selection_add = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.getSelectionAdd = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.setSelectionAdd = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.clearSelectionAdd = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionSpatialUnitSelectionRect.prototype.hasSelectionAdd = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.SC2APIProtocol);

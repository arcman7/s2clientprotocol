/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SC2APIProtocol.CategoryScoreDetails', null, global);
goog.exportSymbol('proto.SC2APIProtocol.Score', null, global);
goog.exportSymbol('proto.SC2APIProtocol.Score.ScoreType', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ScoreDetails', null, global);
goog.exportSymbol('proto.SC2APIProtocol.VitalScoreDetails', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.Score = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.Score, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.Score.displayName = 'proto.SC2APIProtocol.Score';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.Score.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.Score.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.Score} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Score.toObject = function(includeInstance, msg) {
  var f, obj = {
    scoreType: jspb.Message.getField(msg, 6),
    score: jspb.Message.getField(msg, 7),
    scoreDetails: (f = msg.getScoreDetails()) && proto.SC2APIProtocol.ScoreDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.Score}
 */
proto.SC2APIProtocol.Score.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.Score;
  return proto.SC2APIProtocol.Score.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.Score} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.Score}
 */
proto.SC2APIProtocol.Score.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {!proto.SC2APIProtocol.Score.ScoreType} */ (reader.readEnum());
      msg.setScoreType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 8:
      var value = new proto.SC2APIProtocol.ScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.ScoreDetails.deserializeBinaryFromReader);
      msg.setScoreDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.Score.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.Score.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.Score} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Score.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SC2APIProtocol.Score.ScoreType} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getScoreDetails();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SC2APIProtocol.ScoreDetails.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.Score.ScoreType = {
  CURRICULUM: 1,
  MELEE: 2
};

/**
 * optional ScoreType score_type = 6;
 * @return {!proto.SC2APIProtocol.Score.ScoreType}
 */
proto.SC2APIProtocol.Score.prototype.getScoreType = function() {
  return /** @type {!proto.SC2APIProtocol.Score.ScoreType} */ (jspb.Message.getFieldWithDefault(this, 6, 1));
};


/** @param {!proto.SC2APIProtocol.Score.ScoreType} value */
proto.SC2APIProtocol.Score.prototype.setScoreType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.Score.prototype.clearScoreType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Score.prototype.hasScoreType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 score = 7;
 * @return {number}
 */
proto.SC2APIProtocol.Score.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Score.prototype.setScore = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SC2APIProtocol.Score.prototype.clearScore = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Score.prototype.hasScore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ScoreDetails score_details = 8;
 * @return {?proto.SC2APIProtocol.ScoreDetails}
 */
proto.SC2APIProtocol.Score.prototype.getScoreDetails = function() {
  return /** @type{?proto.SC2APIProtocol.ScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ScoreDetails, 8));
};


/** @param {?proto.SC2APIProtocol.ScoreDetails|undefined} value */
proto.SC2APIProtocol.Score.prototype.setScoreDetails = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.SC2APIProtocol.Score.prototype.clearScoreDetails = function() {
  this.setScoreDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Score.prototype.hasScoreDetails = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.CategoryScoreDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.CategoryScoreDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.CategoryScoreDetails.displayName = 'proto.SC2APIProtocol.CategoryScoreDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.CategoryScoreDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.CategoryScoreDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.CategoryScoreDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    none: jspb.Message.getOptionalFloatingPointField(msg, 1),
    army: jspb.Message.getOptionalFloatingPointField(msg, 2),
    economy: jspb.Message.getOptionalFloatingPointField(msg, 3),
    technology: jspb.Message.getOptionalFloatingPointField(msg, 4),
    upgrade: jspb.Message.getOptionalFloatingPointField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.CategoryScoreDetails;
  return proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.CategoryScoreDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNone(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setArmy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEconomy(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTechnology(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUpgrade(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.CategoryScoreDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float none = 1;
 * @return {number}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.getNone = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.setNone = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.CategoryScoreDetails.prototype.clearNone = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.hasNone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float army = 2;
 * @return {number}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.getArmy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.setArmy = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.CategoryScoreDetails.prototype.clearArmy = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.hasArmy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float economy = 3;
 * @return {number}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.getEconomy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.setEconomy = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.CategoryScoreDetails.prototype.clearEconomy = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.hasEconomy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float technology = 4;
 * @return {number}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.getTechnology = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.setTechnology = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.CategoryScoreDetails.prototype.clearTechnology = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.hasTechnology = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float upgrade = 5;
 * @return {number}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.getUpgrade = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.setUpgrade = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.CategoryScoreDetails.prototype.clearUpgrade = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.CategoryScoreDetails.prototype.hasUpgrade = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.VitalScoreDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.VitalScoreDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.VitalScoreDetails.displayName = 'proto.SC2APIProtocol.VitalScoreDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.VitalScoreDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.VitalScoreDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.VitalScoreDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.VitalScoreDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    life: jspb.Message.getOptionalFloatingPointField(msg, 1),
    shields: jspb.Message.getOptionalFloatingPointField(msg, 2),
    energy: jspb.Message.getOptionalFloatingPointField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.VitalScoreDetails}
 */
proto.SC2APIProtocol.VitalScoreDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.VitalScoreDetails;
  return proto.SC2APIProtocol.VitalScoreDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.VitalScoreDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.VitalScoreDetails}
 */
proto.SC2APIProtocol.VitalScoreDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLife(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShields(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEnergy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.VitalScoreDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.VitalScoreDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.VitalScoreDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.VitalScoreDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float life = 1;
 * @return {number}
 */
proto.SC2APIProtocol.VitalScoreDetails.prototype.getLife = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.VitalScoreDetails.prototype.setLife = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.VitalScoreDetails.prototype.clearLife = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.VitalScoreDetails.prototype.hasLife = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float shields = 2;
 * @return {number}
 */
proto.SC2APIProtocol.VitalScoreDetails.prototype.getShields = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.VitalScoreDetails.prototype.setShields = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.VitalScoreDetails.prototype.clearShields = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.VitalScoreDetails.prototype.hasShields = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float energy = 3;
 * @return {number}
 */
proto.SC2APIProtocol.VitalScoreDetails.prototype.getEnergy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.VitalScoreDetails.prototype.setEnergy = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.VitalScoreDetails.prototype.clearEnergy = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.VitalScoreDetails.prototype.hasEnergy = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ScoreDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ScoreDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ScoreDetails.displayName = 'proto.SC2APIProtocol.ScoreDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ScoreDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ScoreDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ScoreDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    idleProductionTime: jspb.Message.getOptionalFloatingPointField(msg, 1),
    idleWorkerTime: jspb.Message.getOptionalFloatingPointField(msg, 2),
    totalValueUnits: jspb.Message.getOptionalFloatingPointField(msg, 3),
    totalValueStructures: jspb.Message.getOptionalFloatingPointField(msg, 4),
    killedValueUnits: jspb.Message.getOptionalFloatingPointField(msg, 5),
    killedValueStructures: jspb.Message.getOptionalFloatingPointField(msg, 6),
    collectedMinerals: jspb.Message.getOptionalFloatingPointField(msg, 7),
    collectedVespene: jspb.Message.getOptionalFloatingPointField(msg, 8),
    collectionRateMinerals: jspb.Message.getOptionalFloatingPointField(msg, 9),
    collectionRateVespene: jspb.Message.getOptionalFloatingPointField(msg, 10),
    spentMinerals: jspb.Message.getOptionalFloatingPointField(msg, 11),
    spentVespene: jspb.Message.getOptionalFloatingPointField(msg, 12),
    foodUsed: (f = msg.getFoodUsed()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    killedMinerals: (f = msg.getKilledMinerals()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    killedVespene: (f = msg.getKilledVespene()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    lostMinerals: (f = msg.getLostMinerals()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    lostVespene: (f = msg.getLostVespene()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    friendlyFireMinerals: (f = msg.getFriendlyFireMinerals()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    friendlyFireVespene: (f = msg.getFriendlyFireVespene()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    usedMinerals: (f = msg.getUsedMinerals()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    usedVespene: (f = msg.getUsedVespene()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    totalUsedMinerals: (f = msg.getTotalUsedMinerals()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    totalUsedVespene: (f = msg.getTotalUsedVespene()) && proto.SC2APIProtocol.CategoryScoreDetails.toObject(includeInstance, f),
    totalDamageDealt: (f = msg.getTotalDamageDealt()) && proto.SC2APIProtocol.VitalScoreDetails.toObject(includeInstance, f),
    totalDamageTaken: (f = msg.getTotalDamageTaken()) && proto.SC2APIProtocol.VitalScoreDetails.toObject(includeInstance, f),
    totalHealed: (f = msg.getTotalHealed()) && proto.SC2APIProtocol.VitalScoreDetails.toObject(includeInstance, f),
    currentApm: jspb.Message.getOptionalFloatingPointField(msg, 27),
    currentEffectiveApm: jspb.Message.getOptionalFloatingPointField(msg, 28)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ScoreDetails;
  return proto.SC2APIProtocol.ScoreDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ScoreDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIdleProductionTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIdleWorkerTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalValueUnits(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalValueStructures(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKilledValueUnits(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKilledValueStructures(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCollectedMinerals(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCollectedVespene(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCollectionRateMinerals(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCollectionRateVespene(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpentMinerals(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpentVespene(value);
      break;
    case 13:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setFoodUsed(value);
      break;
    case 14:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setKilledMinerals(value);
      break;
    case 15:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setKilledVespene(value);
      break;
    case 16:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setLostMinerals(value);
      break;
    case 17:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setLostVespene(value);
      break;
    case 18:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setFriendlyFireMinerals(value);
      break;
    case 19:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setFriendlyFireVespene(value);
      break;
    case 20:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setUsedMinerals(value);
      break;
    case 21:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setUsedVespene(value);
      break;
    case 22:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setTotalUsedMinerals(value);
      break;
    case 23:
      var value = new proto.SC2APIProtocol.CategoryScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.CategoryScoreDetails.deserializeBinaryFromReader);
      msg.setTotalUsedVespene(value);
      break;
    case 24:
      var value = new proto.SC2APIProtocol.VitalScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.VitalScoreDetails.deserializeBinaryFromReader);
      msg.setTotalDamageDealt(value);
      break;
    case 25:
      var value = new proto.SC2APIProtocol.VitalScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.VitalScoreDetails.deserializeBinaryFromReader);
      msg.setTotalDamageTaken(value);
      break;
    case 26:
      var value = new proto.SC2APIProtocol.VitalScoreDetails;
      reader.readMessage(value,proto.SC2APIProtocol.VitalScoreDetails.deserializeBinaryFromReader);
      msg.setTotalHealed(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentApm(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentEffectiveApm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ScoreDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ScoreDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ScoreDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getFoodUsed();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getKilledMinerals();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getKilledVespene();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getLostMinerals();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getLostVespene();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getFriendlyFireMinerals();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getFriendlyFireVespene();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getUsedMinerals();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getUsedVespene();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getTotalUsedMinerals();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getTotalUsedVespene();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.SC2APIProtocol.CategoryScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getTotalDamageDealt();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.SC2APIProtocol.VitalScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getTotalDamageTaken();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.SC2APIProtocol.VitalScoreDetails.serializeBinaryToWriter
    );
  }
  f = message.getTotalHealed();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.SC2APIProtocol.VitalScoreDetails.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeFloat(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeFloat(
      28,
      f
    );
  }
};


/**
 * optional float idle_production_time = 1;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getIdleProductionTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setIdleProductionTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearIdleProductionTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasIdleProductionTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float idle_worker_time = 2;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getIdleWorkerTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setIdleWorkerTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearIdleWorkerTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasIdleWorkerTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float total_value_units = 3;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getTotalValueUnits = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setTotalValueUnits = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearTotalValueUnits = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasTotalValueUnits = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float total_value_structures = 4;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getTotalValueStructures = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setTotalValueStructures = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearTotalValueStructures = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasTotalValueStructures = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float killed_value_units = 5;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getKilledValueUnits = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setKilledValueUnits = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearKilledValueUnits = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasKilledValueUnits = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float killed_value_structures = 6;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getKilledValueStructures = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setKilledValueStructures = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearKilledValueStructures = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasKilledValueStructures = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float collected_minerals = 7;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getCollectedMinerals = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setCollectedMinerals = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearCollectedMinerals = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasCollectedMinerals = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float collected_vespene = 8;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getCollectedVespene = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setCollectedVespene = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearCollectedVespene = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasCollectedVespene = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float collection_rate_minerals = 9;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getCollectionRateMinerals = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setCollectionRateMinerals = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearCollectionRateMinerals = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasCollectionRateMinerals = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float collection_rate_vespene = 10;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getCollectionRateVespene = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setCollectionRateVespene = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearCollectionRateVespene = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasCollectionRateVespene = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float spent_minerals = 11;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getSpentMinerals = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setSpentMinerals = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearSpentMinerals = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasSpentMinerals = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float spent_vespene = 12;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getSpentVespene = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setSpentVespene = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearSpentVespene = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasSpentVespene = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CategoryScoreDetails food_used = 13;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getFoodUsed = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 13));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setFoodUsed = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearFoodUsed = function() {
  this.setFoodUsed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasFoodUsed = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CategoryScoreDetails killed_minerals = 14;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getKilledMinerals = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 14));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setKilledMinerals = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearKilledMinerals = function() {
  this.setKilledMinerals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasKilledMinerals = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional CategoryScoreDetails killed_vespene = 15;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getKilledVespene = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 15));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setKilledVespene = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearKilledVespene = function() {
  this.setKilledVespene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasKilledVespene = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional CategoryScoreDetails lost_minerals = 16;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getLostMinerals = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 16));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setLostMinerals = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearLostMinerals = function() {
  this.setLostMinerals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasLostMinerals = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional CategoryScoreDetails lost_vespene = 17;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getLostVespene = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 17));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setLostVespene = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearLostVespene = function() {
  this.setLostVespene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasLostVespene = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional CategoryScoreDetails friendly_fire_minerals = 18;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getFriendlyFireMinerals = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 18));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setFriendlyFireMinerals = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearFriendlyFireMinerals = function() {
  this.setFriendlyFireMinerals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasFriendlyFireMinerals = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional CategoryScoreDetails friendly_fire_vespene = 19;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getFriendlyFireVespene = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 19));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setFriendlyFireVespene = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearFriendlyFireVespene = function() {
  this.setFriendlyFireVespene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasFriendlyFireVespene = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional CategoryScoreDetails used_minerals = 20;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getUsedMinerals = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 20));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setUsedMinerals = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearUsedMinerals = function() {
  this.setUsedMinerals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasUsedMinerals = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional CategoryScoreDetails used_vespene = 21;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getUsedVespene = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 21));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setUsedVespene = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearUsedVespene = function() {
  this.setUsedVespene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasUsedVespene = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional CategoryScoreDetails total_used_minerals = 22;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getTotalUsedMinerals = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 22));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setTotalUsedMinerals = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearTotalUsedMinerals = function() {
  this.setTotalUsedMinerals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasTotalUsedMinerals = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional CategoryScoreDetails total_used_vespene = 23;
 * @return {?proto.SC2APIProtocol.CategoryScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getTotalUsedVespene = function() {
  return /** @type{?proto.SC2APIProtocol.CategoryScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.CategoryScoreDetails, 23));
};


/** @param {?proto.SC2APIProtocol.CategoryScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setTotalUsedVespene = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearTotalUsedVespene = function() {
  this.setTotalUsedVespene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasTotalUsedVespene = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional VitalScoreDetails total_damage_dealt = 24;
 * @return {?proto.SC2APIProtocol.VitalScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getTotalDamageDealt = function() {
  return /** @type{?proto.SC2APIProtocol.VitalScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.VitalScoreDetails, 24));
};


/** @param {?proto.SC2APIProtocol.VitalScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setTotalDamageDealt = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearTotalDamageDealt = function() {
  this.setTotalDamageDealt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasTotalDamageDealt = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional VitalScoreDetails total_damage_taken = 25;
 * @return {?proto.SC2APIProtocol.VitalScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getTotalDamageTaken = function() {
  return /** @type{?proto.SC2APIProtocol.VitalScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.VitalScoreDetails, 25));
};


/** @param {?proto.SC2APIProtocol.VitalScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setTotalDamageTaken = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearTotalDamageTaken = function() {
  this.setTotalDamageTaken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasTotalDamageTaken = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional VitalScoreDetails total_healed = 26;
 * @return {?proto.SC2APIProtocol.VitalScoreDetails}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getTotalHealed = function() {
  return /** @type{?proto.SC2APIProtocol.VitalScoreDetails} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.VitalScoreDetails, 26));
};


/** @param {?proto.SC2APIProtocol.VitalScoreDetails|undefined} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setTotalHealed = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearTotalHealed = function() {
  this.setTotalHealed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasTotalHealed = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional float current_apm = 27;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getCurrentApm = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 27, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setCurrentApm = function(value) {
  jspb.Message.setField(this, 27, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearCurrentApm = function() {
  jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasCurrentApm = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional float current_effective_apm = 28;
 * @return {number}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.getCurrentEffectiveApm = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 28, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ScoreDetails.prototype.setCurrentEffectiveApm = function(value) {
  jspb.Message.setField(this, 28, value);
};


proto.SC2APIProtocol.ScoreDetails.prototype.clearCurrentEffectiveApm = function() {
  jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ScoreDetails.prototype.hasCurrentEffectiveApm = function() {
  return jspb.Message.getField(this, 28) != null;
};


goog.object.extend(exports, proto.SC2APIProtocol);

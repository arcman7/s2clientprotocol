/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var s2clientprotocol_common_pb = require('../s2clientprotocol/common_pb.js');
goog.exportSymbol('proto.SC2APIProtocol.AbilityData', null, global);
goog.exportSymbol('proto.SC2APIProtocol.AbilityData.Target', null, global);
goog.exportSymbol('proto.SC2APIProtocol.Attribute', null, global);
goog.exportSymbol('proto.SC2APIProtocol.BuffData', null, global);
goog.exportSymbol('proto.SC2APIProtocol.DamageBonus', null, global);
goog.exportSymbol('proto.SC2APIProtocol.EffectData', null, global);
goog.exportSymbol('proto.SC2APIProtocol.UnitTypeData', null, global);
goog.exportSymbol('proto.SC2APIProtocol.UpgradeData', null, global);
goog.exportSymbol('proto.SC2APIProtocol.Weapon', null, global);
goog.exportSymbol('proto.SC2APIProtocol.Weapon.TargetType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.AbilityData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.AbilityData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.AbilityData.displayName = 'proto.SC2APIProtocol.AbilityData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.AbilityData.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.AbilityData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.AbilityData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.AbilityData.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityId: jspb.Message.getField(msg, 1),
    linkName: jspb.Message.getField(msg, 2),
    linkIndex: jspb.Message.getField(msg, 3),
    buttonName: jspb.Message.getField(msg, 4),
    friendlyName: jspb.Message.getField(msg, 5),
    hotkey: jspb.Message.getField(msg, 6),
    remapsToAbilityId: jspb.Message.getField(msg, 7),
    available: jspb.Message.getField(msg, 8),
    target: jspb.Message.getField(msg, 9),
    allowMinimap: jspb.Message.getField(msg, 10),
    allowAutocast: jspb.Message.getField(msg, 11),
    isBuilding: jspb.Message.getField(msg, 12),
    footprintRadius: jspb.Message.getOptionalFloatingPointField(msg, 13),
    isInstantPlacement: jspb.Message.getField(msg, 14),
    castRange: jspb.Message.getOptionalFloatingPointField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.AbilityData}
 */
proto.SC2APIProtocol.AbilityData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.AbilityData;
  return proto.SC2APIProtocol.AbilityData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.AbilityData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.AbilityData}
 */
proto.SC2APIProtocol.AbilityData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilityId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLinkIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setButtonName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendlyName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHotkey(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemapsToAbilityId(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    case 9:
      var value = /** @type {!proto.SC2APIProtocol.AbilityData.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowMinimap(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowAutocast(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBuilding(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFootprintRadius(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInstantPlacement(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCastRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.AbilityData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.AbilityData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.AbilityData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.AbilityData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {!proto.SC2APIProtocol.AbilityData.Target} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.AbilityData.Target = {
  NONE: 1,
  POINT: 2,
  UNIT: 3,
  POINTORUNIT: 4,
  POINTORNONE: 5
};

/**
 * optional uint32 ability_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.AbilityData.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.AbilityData.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string link_name = 2;
 * @return {string}
 */
proto.SC2APIProtocol.AbilityData.prototype.getLinkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.AbilityData.prototype.setLinkName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearLinkName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasLinkName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 link_index = 3;
 * @return {number}
 */
proto.SC2APIProtocol.AbilityData.prototype.getLinkIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.AbilityData.prototype.setLinkIndex = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearLinkIndex = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasLinkIndex = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string button_name = 4;
 * @return {string}
 */
proto.SC2APIProtocol.AbilityData.prototype.getButtonName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.AbilityData.prototype.setButtonName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearButtonName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasButtonName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string friendly_name = 5;
 * @return {string}
 */
proto.SC2APIProtocol.AbilityData.prototype.getFriendlyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.AbilityData.prototype.setFriendlyName = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearFriendlyName = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasFriendlyName = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string hotkey = 6;
 * @return {string}
 */
proto.SC2APIProtocol.AbilityData.prototype.getHotkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.AbilityData.prototype.setHotkey = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearHotkey = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasHotkey = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 remaps_to_ability_id = 7;
 * @return {number}
 */
proto.SC2APIProtocol.AbilityData.prototype.getRemapsToAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.AbilityData.prototype.setRemapsToAbilityId = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearRemapsToAbilityId = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasRemapsToAbilityId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool available = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.AbilityData.prototype.setAvailable = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearAvailable = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasAvailable = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Target target = 9;
 * @return {!proto.SC2APIProtocol.AbilityData.Target}
 */
proto.SC2APIProtocol.AbilityData.prototype.getTarget = function() {
  return /** @type {!proto.SC2APIProtocol.AbilityData.Target} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/** @param {!proto.SC2APIProtocol.AbilityData.Target} value */
proto.SC2APIProtocol.AbilityData.prototype.setTarget = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearTarget = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool allow_minimap = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.getAllowMinimap = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.AbilityData.prototype.setAllowMinimap = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearAllowMinimap = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasAllowMinimap = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool allow_autocast = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.getAllowAutocast = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.AbilityData.prototype.setAllowAutocast = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearAllowAutocast = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasAllowAutocast = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool is_building = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.getIsBuilding = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.AbilityData.prototype.setIsBuilding = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearIsBuilding = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasIsBuilding = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float footprint_radius = 13;
 * @return {number}
 */
proto.SC2APIProtocol.AbilityData.prototype.getFootprintRadius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.AbilityData.prototype.setFootprintRadius = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearFootprintRadius = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasFootprintRadius = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool is_instant_placement = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.getIsInstantPlacement = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.AbilityData.prototype.setIsInstantPlacement = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearIsInstantPlacement = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasIsInstantPlacement = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float cast_range = 15;
 * @return {number}
 */
proto.SC2APIProtocol.AbilityData.prototype.getCastRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.AbilityData.prototype.setCastRange = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.SC2APIProtocol.AbilityData.prototype.clearCastRange = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.AbilityData.prototype.hasCastRange = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.DamageBonus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.DamageBonus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.DamageBonus.displayName = 'proto.SC2APIProtocol.DamageBonus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.DamageBonus.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.DamageBonus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.DamageBonus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.DamageBonus.toObject = function(includeInstance, msg) {
  var f, obj = {
    attribute: jspb.Message.getField(msg, 1),
    bonus: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.DamageBonus}
 */
proto.SC2APIProtocol.DamageBonus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.DamageBonus;
  return proto.SC2APIProtocol.DamageBonus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.DamageBonus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.DamageBonus}
 */
proto.SC2APIProtocol.DamageBonus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SC2APIProtocol.Attribute} */ (reader.readEnum());
      msg.setAttribute(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBonus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.DamageBonus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.DamageBonus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.DamageBonus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.DamageBonus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SC2APIProtocol.Attribute} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional Attribute attribute = 1;
 * @return {!proto.SC2APIProtocol.Attribute}
 */
proto.SC2APIProtocol.DamageBonus.prototype.getAttribute = function() {
  return /** @type {!proto.SC2APIProtocol.Attribute} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.SC2APIProtocol.Attribute} value */
proto.SC2APIProtocol.DamageBonus.prototype.setAttribute = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.DamageBonus.prototype.clearAttribute = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.DamageBonus.prototype.hasAttribute = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float bonus = 2;
 * @return {number}
 */
proto.SC2APIProtocol.DamageBonus.prototype.getBonus = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.DamageBonus.prototype.setBonus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.DamageBonus.prototype.clearBonus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.DamageBonus.prototype.hasBonus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.Weapon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.Weapon.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.Weapon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.Weapon.displayName = 'proto.SC2APIProtocol.Weapon';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.Weapon.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.Weapon.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.Weapon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.Weapon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Weapon.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    damage: jspb.Message.getOptionalFloatingPointField(msg, 2),
    damageBonusList: jspb.Message.toObjectList(msg.getDamageBonusList(),
    proto.SC2APIProtocol.DamageBonus.toObject, includeInstance),
    attacks: jspb.Message.getField(msg, 4),
    range: jspb.Message.getOptionalFloatingPointField(msg, 5),
    speed: jspb.Message.getOptionalFloatingPointField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.Weapon}
 */
proto.SC2APIProtocol.Weapon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.Weapon;
  return proto.SC2APIProtocol.Weapon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.Weapon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.Weapon}
 */
proto.SC2APIProtocol.Weapon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SC2APIProtocol.Weapon.TargetType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDamage(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.DamageBonus;
      reader.readMessage(value,proto.SC2APIProtocol.DamageBonus.deserializeBinaryFromReader);
      msg.addDamageBonus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttacks(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRange(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.Weapon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.Weapon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.Weapon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Weapon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SC2APIProtocol.Weapon.TargetType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDamageBonusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SC2APIProtocol.DamageBonus.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.Weapon.TargetType = {
  GROUND: 1,
  AIR: 2,
  ANY: 3
};

/**
 * optional TargetType type = 1;
 * @return {!proto.SC2APIProtocol.Weapon.TargetType}
 */
proto.SC2APIProtocol.Weapon.prototype.getType = function() {
  return /** @type {!proto.SC2APIProtocol.Weapon.TargetType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.SC2APIProtocol.Weapon.TargetType} value */
proto.SC2APIProtocol.Weapon.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.Weapon.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Weapon.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float damage = 2;
 * @return {number}
 */
proto.SC2APIProtocol.Weapon.prototype.getDamage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Weapon.prototype.setDamage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.Weapon.prototype.clearDamage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Weapon.prototype.hasDamage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated DamageBonus damage_bonus = 3;
 * @return {!Array.<!proto.SC2APIProtocol.DamageBonus>}
 */
proto.SC2APIProtocol.Weapon.prototype.getDamageBonusList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.DamageBonus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.DamageBonus, 3));
};


/** @param {!Array.<!proto.SC2APIProtocol.DamageBonus>} value */
proto.SC2APIProtocol.Weapon.prototype.setDamageBonusList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SC2APIProtocol.DamageBonus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.DamageBonus}
 */
proto.SC2APIProtocol.Weapon.prototype.addDamageBonus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SC2APIProtocol.DamageBonus, opt_index);
};


proto.SC2APIProtocol.Weapon.prototype.clearDamageBonusList = function() {
  this.setDamageBonusList([]);
};


/**
 * optional uint32 attacks = 4;
 * @return {number}
 */
proto.SC2APIProtocol.Weapon.prototype.getAttacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Weapon.prototype.setAttacks = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.Weapon.prototype.clearAttacks = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Weapon.prototype.hasAttacks = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float range = 5;
 * @return {number}
 */
proto.SC2APIProtocol.Weapon.prototype.getRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Weapon.prototype.setRange = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.Weapon.prototype.clearRange = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Weapon.prototype.hasRange = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float speed = 6;
 * @return {number}
 */
proto.SC2APIProtocol.Weapon.prototype.getSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Weapon.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.Weapon.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Weapon.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.UnitTypeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.UnitTypeData.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.UnitTypeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.UnitTypeData.displayName = 'proto.SC2APIProtocol.UnitTypeData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.UnitTypeData.repeatedFields_ = [21,8,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.UnitTypeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.UnitTypeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.UnitTypeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitId: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    available: jspb.Message.getField(msg, 3),
    cargoSize: jspb.Message.getField(msg, 4),
    mineralCost: jspb.Message.getField(msg, 12),
    vespeneCost: jspb.Message.getField(msg, 13),
    foodRequired: jspb.Message.getOptionalFloatingPointField(msg, 14),
    foodProvided: jspb.Message.getOptionalFloatingPointField(msg, 18),
    abilityId: jspb.Message.getField(msg, 15),
    race: jspb.Message.getField(msg, 16),
    buildTime: jspb.Message.getOptionalFloatingPointField(msg, 17),
    hasVespene: jspb.Message.getField(msg, 19),
    hasMinerals: jspb.Message.getField(msg, 20),
    sightRange: jspb.Message.getOptionalFloatingPointField(msg, 25),
    techAliasList: jspb.Message.getRepeatedField(msg, 21),
    unitAlias: jspb.Message.getField(msg, 22),
    techRequirement: jspb.Message.getField(msg, 23),
    requireAttached: jspb.Message.getField(msg, 24),
    attributesList: jspb.Message.getRepeatedField(msg, 8),
    movementSpeed: jspb.Message.getOptionalFloatingPointField(msg, 9),
    armor: jspb.Message.getOptionalFloatingPointField(msg, 10),
    weaponsList: jspb.Message.toObjectList(msg.getWeaponsList(),
    proto.SC2APIProtocol.Weapon.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.UnitTypeData}
 */
proto.SC2APIProtocol.UnitTypeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.UnitTypeData;
  return proto.SC2APIProtocol.UnitTypeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.UnitTypeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.UnitTypeData}
 */
proto.SC2APIProtocol.UnitTypeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnitId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCargoSize(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMineralCost(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVespeneCost(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFoodRequired(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFoodProvided(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilityId(value);
      break;
    case 16:
      var value = /** @type {!proto.SC2APIProtocol.Race} */ (reader.readEnum());
      msg.setRace(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBuildTime(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasVespene(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMinerals(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSightRange(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addTechAlias(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnitAlias(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTechRequirement(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequireAttached(value);
      break;
    case 8:
      var value = /** @type {!proto.SC2APIProtocol.Attribute} */ (reader.readEnum());
      msg.addAttributes(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMovementSpeed(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setArmor(value);
      break;
    case 11:
      var value = new proto.SC2APIProtocol.Weapon;
      reader.readMessage(value,proto.SC2APIProtocol.Weapon.deserializeBinaryFromReader);
      msg.addWeapons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.UnitTypeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.UnitTypeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.UnitTypeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {!proto.SC2APIProtocol.Race} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeFloat(
      25,
      f
    );
  }
  f = message.getTechAliasList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeBool(
      24,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getWeaponsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.SC2APIProtocol.Weapon.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 unit_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getUnitId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setUnitId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearUnitId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasUnitId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool available = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setAvailable = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearAvailable = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasAvailable = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 cargo_size = 4;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getCargoSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setCargoSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearCargoSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasCargoSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 mineral_cost = 12;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getMineralCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setMineralCost = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearMineralCost = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasMineralCost = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 vespene_cost = 13;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getVespeneCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setVespeneCost = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearVespeneCost = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasVespeneCost = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float food_required = 14;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getFoodRequired = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setFoodRequired = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearFoodRequired = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasFoodRequired = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float food_provided = 18;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getFoodProvided = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setFoodProvided = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearFoodProvided = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasFoodProvided = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional uint32 ability_id = 15;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Race race = 16;
 * @return {!proto.SC2APIProtocol.Race}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getRace = function() {
  return /** @type {!proto.SC2APIProtocol.Race} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.SC2APIProtocol.Race} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setRace = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearRace = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasRace = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional float build_time = 17;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getBuildTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setBuildTime = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearBuildTime = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasBuildTime = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool has_vespene = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getHasVespene = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setHasVespene = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearHasVespene = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasHasVespene = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bool has_minerals = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getHasMinerals = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setHasMinerals = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearHasMinerals = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasHasMinerals = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional float sight_range = 25;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getSightRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 25, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setSightRange = function(value) {
  jspb.Message.setField(this, 25, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearSightRange = function() {
  jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasSightRange = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * repeated uint32 tech_alias = 21;
 * @return {!Array.<number>}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getTechAliasList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 21));
};


/** @param {!Array.<number>} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setTechAliasList = function(value) {
  jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SC2APIProtocol.UnitTypeData.prototype.addTechAlias = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearTechAliasList = function() {
  this.setTechAliasList([]);
};


/**
 * optional uint32 unit_alias = 22;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getUnitAlias = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setUnitAlias = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearUnitAlias = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasUnitAlias = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional uint32 tech_requirement = 23;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getTechRequirement = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setTechRequirement = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearTechRequirement = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasTechRequirement = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional bool require_attached = 24;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getRequireAttached = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 24, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setRequireAttached = function(value) {
  jspb.Message.setField(this, 24, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearRequireAttached = function() {
  jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasRequireAttached = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * repeated Attribute attributes = 8;
 * @return {!Array.<!proto.SC2APIProtocol.Attribute>}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getAttributesList = function() {
  return /** @type {!Array.<!proto.SC2APIProtocol.Attribute>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<!proto.SC2APIProtocol.Attribute>} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setAttributesList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!proto.SC2APIProtocol.Attribute} value
 * @param {number=} opt_index
 */
proto.SC2APIProtocol.UnitTypeData.prototype.addAttributes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearAttributesList = function() {
  this.setAttributesList([]);
};


/**
 * optional float movement_speed = 9;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getMovementSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setMovementSpeed = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearMovementSpeed = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasMovementSpeed = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float armor = 10;
 * @return {number}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getArmor = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setArmor = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearArmor = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.hasArmor = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated Weapon weapons = 11;
 * @return {!Array.<!proto.SC2APIProtocol.Weapon>}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.getWeaponsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.Weapon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.Weapon, 11));
};


/** @param {!Array.<!proto.SC2APIProtocol.Weapon>} value */
proto.SC2APIProtocol.UnitTypeData.prototype.setWeaponsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.SC2APIProtocol.Weapon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.Weapon}
 */
proto.SC2APIProtocol.UnitTypeData.prototype.addWeapons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.SC2APIProtocol.Weapon, opt_index);
};


proto.SC2APIProtocol.UnitTypeData.prototype.clearWeaponsList = function() {
  this.setWeaponsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.UpgradeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.UpgradeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.UpgradeData.displayName = 'proto.SC2APIProtocol.UpgradeData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.UpgradeData.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.UpgradeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.UpgradeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.UpgradeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    upgradeId: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    mineralCost: jspb.Message.getField(msg, 3),
    vespeneCost: jspb.Message.getField(msg, 4),
    researchTime: jspb.Message.getOptionalFloatingPointField(msg, 5),
    abilityId: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.UpgradeData}
 */
proto.SC2APIProtocol.UpgradeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.UpgradeData;
  return proto.SC2APIProtocol.UpgradeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.UpgradeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.UpgradeData}
 */
proto.SC2APIProtocol.UpgradeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpgradeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMineralCost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVespeneCost(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setResearchTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilityId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.UpgradeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.UpgradeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.UpgradeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.UpgradeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 upgrade_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.UpgradeData.prototype.getUpgradeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UpgradeData.prototype.setUpgradeId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.UpgradeData.prototype.clearUpgradeId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UpgradeData.prototype.hasUpgradeId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SC2APIProtocol.UpgradeData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.UpgradeData.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.UpgradeData.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UpgradeData.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 mineral_cost = 3;
 * @return {number}
 */
proto.SC2APIProtocol.UpgradeData.prototype.getMineralCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UpgradeData.prototype.setMineralCost = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.UpgradeData.prototype.clearMineralCost = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UpgradeData.prototype.hasMineralCost = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 vespene_cost = 4;
 * @return {number}
 */
proto.SC2APIProtocol.UpgradeData.prototype.getVespeneCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UpgradeData.prototype.setVespeneCost = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.UpgradeData.prototype.clearVespeneCost = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UpgradeData.prototype.hasVespeneCost = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float research_time = 5;
 * @return {number}
 */
proto.SC2APIProtocol.UpgradeData.prototype.getResearchTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.UpgradeData.prototype.setResearchTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.UpgradeData.prototype.clearResearchTime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UpgradeData.prototype.hasResearchTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 ability_id = 6;
 * @return {number}
 */
proto.SC2APIProtocol.UpgradeData.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UpgradeData.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.UpgradeData.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UpgradeData.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.BuffData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.BuffData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.BuffData.displayName = 'proto.SC2APIProtocol.BuffData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.BuffData.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.BuffData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.BuffData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.BuffData.toObject = function(includeInstance, msg) {
  var f, obj = {
    buffId: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.BuffData}
 */
proto.SC2APIProtocol.BuffData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.BuffData;
  return proto.SC2APIProtocol.BuffData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.BuffData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.BuffData}
 */
proto.SC2APIProtocol.BuffData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuffId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.BuffData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.BuffData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.BuffData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.BuffData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 buff_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.BuffData.prototype.getBuffId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.BuffData.prototype.setBuffId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.BuffData.prototype.clearBuffId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.BuffData.prototype.hasBuffId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SC2APIProtocol.BuffData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.BuffData.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.BuffData.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.BuffData.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.EffectData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.EffectData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.EffectData.displayName = 'proto.SC2APIProtocol.EffectData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.EffectData.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.EffectData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.EffectData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.EffectData.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectId: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    friendlyName: jspb.Message.getField(msg, 3),
    radius: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.EffectData}
 */
proto.SC2APIProtocol.EffectData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.EffectData;
  return proto.SC2APIProtocol.EffectData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.EffectData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.EffectData}
 */
proto.SC2APIProtocol.EffectData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEffectId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendlyName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.EffectData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.EffectData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.EffectData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.EffectData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint32 effect_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.EffectData.prototype.getEffectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.EffectData.prototype.setEffectId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.EffectData.prototype.clearEffectId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.EffectData.prototype.hasEffectId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SC2APIProtocol.EffectData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.EffectData.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.EffectData.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.EffectData.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string friendly_name = 3;
 * @return {string}
 */
proto.SC2APIProtocol.EffectData.prototype.getFriendlyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.EffectData.prototype.setFriendlyName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.EffectData.prototype.clearFriendlyName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.EffectData.prototype.hasFriendlyName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float radius = 4;
 * @return {number}
 */
proto.SC2APIProtocol.EffectData.prototype.getRadius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.EffectData.prototype.setRadius = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.EffectData.prototype.clearRadius = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.EffectData.prototype.hasRadius = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.Attribute = {
  LIGHT: 1,
  ARMORED: 2,
  BIOLOGICAL: 3,
  MECHANICAL: 4,
  ROBOTIC: 5,
  PSIONIC: 6,
  MASSIVE: 7,
  STRUCTURE: 8,
  HOVER: 9,
  HEROIC: 10,
  SUMMONED: 11
};

goog.object.extend(exports, proto.SC2APIProtocol);

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var s2clientprotocol_common_pb = require('../s2clientprotocol/common_pb.js');
var s2clientprotocol_error_pb = require('../s2clientprotocol/error_pb.js');
goog.exportSymbol('proto.SC2APIProtocol.RequestQuery', null, global);
goog.exportSymbol('proto.SC2APIProtocol.RequestQueryAvailableAbilities', null, global);
goog.exportSymbol('proto.SC2APIProtocol.RequestQueryBuildingPlacement', null, global);
goog.exportSymbol('proto.SC2APIProtocol.RequestQueryPathing', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ResponseQuery', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ResponseQueryAvailableAbilities', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ResponseQueryBuildingPlacement', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ResponseQueryPathing', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.RequestQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.RequestQuery.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.RequestQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.RequestQuery.displayName = 'proto.SC2APIProtocol.RequestQuery';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.RequestQuery.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.RequestQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.RequestQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.RequestQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathingList: jspb.Message.toObjectList(msg.getPathingList(),
    proto.SC2APIProtocol.RequestQueryPathing.toObject, includeInstance),
    abilitiesList: jspb.Message.toObjectList(msg.getAbilitiesList(),
    proto.SC2APIProtocol.RequestQueryAvailableAbilities.toObject, includeInstance),
    placementsList: jspb.Message.toObjectList(msg.getPlacementsList(),
    proto.SC2APIProtocol.RequestQueryBuildingPlacement.toObject, includeInstance),
    ignoreResourceRequirements: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.RequestQuery}
 */
proto.SC2APIProtocol.RequestQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.RequestQuery;
  return proto.SC2APIProtocol.RequestQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.RequestQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.RequestQuery}
 */
proto.SC2APIProtocol.RequestQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.RequestQueryPathing;
      reader.readMessage(value,proto.SC2APIProtocol.RequestQueryPathing.deserializeBinaryFromReader);
      msg.addPathing(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.RequestQueryAvailableAbilities;
      reader.readMessage(value,proto.SC2APIProtocol.RequestQueryAvailableAbilities.deserializeBinaryFromReader);
      msg.addAbilities(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.RequestQueryBuildingPlacement;
      reader.readMessage(value,proto.SC2APIProtocol.RequestQueryBuildingPlacement.deserializeBinaryFromReader);
      msg.addPlacements(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgnoreResourceRequirements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RequestQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.RequestQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.RequestQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SC2APIProtocol.RequestQueryPathing.serializeBinaryToWriter
    );
  }
  f = message.getAbilitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SC2APIProtocol.RequestQueryAvailableAbilities.serializeBinaryToWriter
    );
  }
  f = message.getPlacementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SC2APIProtocol.RequestQueryBuildingPlacement.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * repeated RequestQueryPathing pathing = 1;
 * @return {!Array.<!proto.SC2APIProtocol.RequestQueryPathing>}
 */
proto.SC2APIProtocol.RequestQuery.prototype.getPathingList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.RequestQueryPathing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.RequestQueryPathing, 1));
};


/** @param {!Array.<!proto.SC2APIProtocol.RequestQueryPathing>} value */
proto.SC2APIProtocol.RequestQuery.prototype.setPathingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SC2APIProtocol.RequestQueryPathing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.RequestQueryPathing}
 */
proto.SC2APIProtocol.RequestQuery.prototype.addPathing = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SC2APIProtocol.RequestQueryPathing, opt_index);
};


proto.SC2APIProtocol.RequestQuery.prototype.clearPathingList = function() {
  this.setPathingList([]);
};


/**
 * repeated RequestQueryAvailableAbilities abilities = 2;
 * @return {!Array.<!proto.SC2APIProtocol.RequestQueryAvailableAbilities>}
 */
proto.SC2APIProtocol.RequestQuery.prototype.getAbilitiesList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.RequestQueryAvailableAbilities>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.RequestQueryAvailableAbilities, 2));
};


/** @param {!Array.<!proto.SC2APIProtocol.RequestQueryAvailableAbilities>} value */
proto.SC2APIProtocol.RequestQuery.prototype.setAbilitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SC2APIProtocol.RequestQueryAvailableAbilities=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.RequestQueryAvailableAbilities}
 */
proto.SC2APIProtocol.RequestQuery.prototype.addAbilities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SC2APIProtocol.RequestQueryAvailableAbilities, opt_index);
};


proto.SC2APIProtocol.RequestQuery.prototype.clearAbilitiesList = function() {
  this.setAbilitiesList([]);
};


/**
 * repeated RequestQueryBuildingPlacement placements = 3;
 * @return {!Array.<!proto.SC2APIProtocol.RequestQueryBuildingPlacement>}
 */
proto.SC2APIProtocol.RequestQuery.prototype.getPlacementsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.RequestQueryBuildingPlacement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.RequestQueryBuildingPlacement, 3));
};


/** @param {!Array.<!proto.SC2APIProtocol.RequestQueryBuildingPlacement>} value */
proto.SC2APIProtocol.RequestQuery.prototype.setPlacementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SC2APIProtocol.RequestQueryBuildingPlacement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.RequestQueryBuildingPlacement}
 */
proto.SC2APIProtocol.RequestQuery.prototype.addPlacements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SC2APIProtocol.RequestQueryBuildingPlacement, opt_index);
};


proto.SC2APIProtocol.RequestQuery.prototype.clearPlacementsList = function() {
  this.setPlacementsList([]);
};


/**
 * optional bool ignore_resource_requirements = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.RequestQuery.prototype.getIgnoreResourceRequirements = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.RequestQuery.prototype.setIgnoreResourceRequirements = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.RequestQuery.prototype.clearIgnoreResourceRequirements = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestQuery.prototype.hasIgnoreResourceRequirements = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ResponseQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ResponseQuery.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.ResponseQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ResponseQuery.displayName = 'proto.SC2APIProtocol.ResponseQuery';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ResponseQuery.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ResponseQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ResponseQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ResponseQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathingList: jspb.Message.toObjectList(msg.getPathingList(),
    proto.SC2APIProtocol.ResponseQueryPathing.toObject, includeInstance),
    abilitiesList: jspb.Message.toObjectList(msg.getAbilitiesList(),
    proto.SC2APIProtocol.ResponseQueryAvailableAbilities.toObject, includeInstance),
    placementsList: jspb.Message.toObjectList(msg.getPlacementsList(),
    proto.SC2APIProtocol.ResponseQueryBuildingPlacement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ResponseQuery}
 */
proto.SC2APIProtocol.ResponseQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ResponseQuery;
  return proto.SC2APIProtocol.ResponseQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ResponseQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ResponseQuery}
 */
proto.SC2APIProtocol.ResponseQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.ResponseQueryPathing;
      reader.readMessage(value,proto.SC2APIProtocol.ResponseQueryPathing.deserializeBinaryFromReader);
      msg.addPathing(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.ResponseQueryAvailableAbilities;
      reader.readMessage(value,proto.SC2APIProtocol.ResponseQueryAvailableAbilities.deserializeBinaryFromReader);
      msg.addAbilities(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.ResponseQueryBuildingPlacement;
      reader.readMessage(value,proto.SC2APIProtocol.ResponseQueryBuildingPlacement.deserializeBinaryFromReader);
      msg.addPlacements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ResponseQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ResponseQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ResponseQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SC2APIProtocol.ResponseQueryPathing.serializeBinaryToWriter
    );
  }
  f = message.getAbilitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SC2APIProtocol.ResponseQueryAvailableAbilities.serializeBinaryToWriter
    );
  }
  f = message.getPlacementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SC2APIProtocol.ResponseQueryBuildingPlacement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResponseQueryPathing pathing = 1;
 * @return {!Array.<!proto.SC2APIProtocol.ResponseQueryPathing>}
 */
proto.SC2APIProtocol.ResponseQuery.prototype.getPathingList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.ResponseQueryPathing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.ResponseQueryPathing, 1));
};


/** @param {!Array.<!proto.SC2APIProtocol.ResponseQueryPathing>} value */
proto.SC2APIProtocol.ResponseQuery.prototype.setPathingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SC2APIProtocol.ResponseQueryPathing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.ResponseQueryPathing}
 */
proto.SC2APIProtocol.ResponseQuery.prototype.addPathing = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SC2APIProtocol.ResponseQueryPathing, opt_index);
};


proto.SC2APIProtocol.ResponseQuery.prototype.clearPathingList = function() {
  this.setPathingList([]);
};


/**
 * repeated ResponseQueryAvailableAbilities abilities = 2;
 * @return {!Array.<!proto.SC2APIProtocol.ResponseQueryAvailableAbilities>}
 */
proto.SC2APIProtocol.ResponseQuery.prototype.getAbilitiesList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.ResponseQueryAvailableAbilities>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.ResponseQueryAvailableAbilities, 2));
};


/** @param {!Array.<!proto.SC2APIProtocol.ResponseQueryAvailableAbilities>} value */
proto.SC2APIProtocol.ResponseQuery.prototype.setAbilitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SC2APIProtocol.ResponseQueryAvailableAbilities=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.ResponseQueryAvailableAbilities}
 */
proto.SC2APIProtocol.ResponseQuery.prototype.addAbilities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SC2APIProtocol.ResponseQueryAvailableAbilities, opt_index);
};


proto.SC2APIProtocol.ResponseQuery.prototype.clearAbilitiesList = function() {
  this.setAbilitiesList([]);
};


/**
 * repeated ResponseQueryBuildingPlacement placements = 3;
 * @return {!Array.<!proto.SC2APIProtocol.ResponseQueryBuildingPlacement>}
 */
proto.SC2APIProtocol.ResponseQuery.prototype.getPlacementsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.ResponseQueryBuildingPlacement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.ResponseQueryBuildingPlacement, 3));
};


/** @param {!Array.<!proto.SC2APIProtocol.ResponseQueryBuildingPlacement>} value */
proto.SC2APIProtocol.ResponseQuery.prototype.setPlacementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SC2APIProtocol.ResponseQueryBuildingPlacement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.ResponseQueryBuildingPlacement}
 */
proto.SC2APIProtocol.ResponseQuery.prototype.addPlacements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SC2APIProtocol.ResponseQueryBuildingPlacement, opt_index);
};


proto.SC2APIProtocol.ResponseQuery.prototype.clearPlacementsList = function() {
  this.setPlacementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.RequestQueryPathing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SC2APIProtocol.RequestQueryPathing.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.RequestQueryPathing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.RequestQueryPathing.displayName = 'proto.SC2APIProtocol.RequestQueryPathing';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.RequestQueryPathing.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.RequestQueryPathing.StartCase = {
  START_NOT_SET: 0,
  START_POS: 1,
  UNIT_TAG: 2
};

/**
 * @return {proto.SC2APIProtocol.RequestQueryPathing.StartCase}
 */
proto.SC2APIProtocol.RequestQueryPathing.prototype.getStartCase = function() {
  return /** @type {proto.SC2APIProtocol.RequestQueryPathing.StartCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.RequestQueryPathing.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.RequestQueryPathing.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.RequestQueryPathing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.RequestQueryPathing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestQueryPathing.toObject = function(includeInstance, msg) {
  var f, obj = {
    startPos: (f = msg.getStartPos()) && s2clientprotocol_common_pb.Point2D.toObject(includeInstance, f),
    unitTag: jspb.Message.getField(msg, 2),
    endPos: (f = msg.getEndPos()) && s2clientprotocol_common_pb.Point2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.RequestQueryPathing}
 */
proto.SC2APIProtocol.RequestQueryPathing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.RequestQueryPathing;
  return proto.SC2APIProtocol.RequestQueryPathing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.RequestQueryPathing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.RequestQueryPathing}
 */
proto.SC2APIProtocol.RequestQueryPathing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.Point2D;
      reader.readMessage(value,s2clientprotocol_common_pb.Point2D.deserializeBinaryFromReader);
      msg.setStartPos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnitTag(value);
      break;
    case 3:
      var value = new s2clientprotocol_common_pb.Point2D;
      reader.readMessage(value,s2clientprotocol_common_pb.Point2D.deserializeBinaryFromReader);
      msg.setEndPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RequestQueryPathing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.RequestQueryPathing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.RequestQueryPathing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestQueryPathing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartPos();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEndPos();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      s2clientprotocol_common_pb.Point2D.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point2D start_pos = 1;
 * @return {?proto.SC2APIProtocol.Point2D}
 */
proto.SC2APIProtocol.RequestQueryPathing.prototype.getStartPos = function() {
  return /** @type{?proto.SC2APIProtocol.Point2D} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point2D, 1));
};


/** @param {?proto.SC2APIProtocol.Point2D|undefined} value */
proto.SC2APIProtocol.RequestQueryPathing.prototype.setStartPos = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.SC2APIProtocol.RequestQueryPathing.oneofGroups_[0], value);
};


proto.SC2APIProtocol.RequestQueryPathing.prototype.clearStartPos = function() {
  this.setStartPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestQueryPathing.prototype.hasStartPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 unit_tag = 2;
 * @return {number}
 */
proto.SC2APIProtocol.RequestQueryPathing.prototype.getUnitTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.RequestQueryPathing.prototype.setUnitTag = function(value) {
  jspb.Message.setOneofField(this, 2, proto.SC2APIProtocol.RequestQueryPathing.oneofGroups_[0], value);
};


proto.SC2APIProtocol.RequestQueryPathing.prototype.clearUnitTag = function() {
  jspb.Message.setOneofField(this, 2, proto.SC2APIProtocol.RequestQueryPathing.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestQueryPathing.prototype.hasUnitTag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point2D end_pos = 3;
 * @return {?proto.SC2APIProtocol.Point2D}
 */
proto.SC2APIProtocol.RequestQueryPathing.prototype.getEndPos = function() {
  return /** @type{?proto.SC2APIProtocol.Point2D} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point2D, 3));
};


/** @param {?proto.SC2APIProtocol.Point2D|undefined} value */
proto.SC2APIProtocol.RequestQueryPathing.prototype.setEndPos = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SC2APIProtocol.RequestQueryPathing.prototype.clearEndPos = function() {
  this.setEndPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestQueryPathing.prototype.hasEndPos = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ResponseQueryPathing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ResponseQueryPathing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ResponseQueryPathing.displayName = 'proto.SC2APIProtocol.ResponseQueryPathing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ResponseQueryPathing.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ResponseQueryPathing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ResponseQueryPathing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseQueryPathing.toObject = function(includeInstance, msg) {
  var f, obj = {
    distance: jspb.Message.getOptionalFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ResponseQueryPathing}
 */
proto.SC2APIProtocol.ResponseQueryPathing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ResponseQueryPathing;
  return proto.SC2APIProtocol.ResponseQueryPathing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ResponseQueryPathing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ResponseQueryPathing}
 */
proto.SC2APIProtocol.ResponseQueryPathing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ResponseQueryPathing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ResponseQueryPathing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ResponseQueryPathing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseQueryPathing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float distance = 1;
 * @return {number}
 */
proto.SC2APIProtocol.ResponseQueryPathing.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ResponseQueryPathing.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ResponseQueryPathing.prototype.clearDistance = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseQueryPathing.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.RequestQueryAvailableAbilities = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.RequestQueryAvailableAbilities, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.RequestQueryAvailableAbilities.displayName = 'proto.SC2APIProtocol.RequestQueryAvailableAbilities';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.RequestQueryAvailableAbilities.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.RequestQueryAvailableAbilities.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.RequestQueryAvailableAbilities} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestQueryAvailableAbilities.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitTag: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.RequestQueryAvailableAbilities}
 */
proto.SC2APIProtocol.RequestQueryAvailableAbilities.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.RequestQueryAvailableAbilities;
  return proto.SC2APIProtocol.RequestQueryAvailableAbilities.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.RequestQueryAvailableAbilities} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.RequestQueryAvailableAbilities}
 */
proto.SC2APIProtocol.RequestQueryAvailableAbilities.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnitTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RequestQueryAvailableAbilities.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.RequestQueryAvailableAbilities.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.RequestQueryAvailableAbilities} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestQueryAvailableAbilities.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 unit_tag = 1;
 * @return {number}
 */
proto.SC2APIProtocol.RequestQueryAvailableAbilities.prototype.getUnitTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.RequestQueryAvailableAbilities.prototype.setUnitTag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.RequestQueryAvailableAbilities.prototype.clearUnitTag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestQueryAvailableAbilities.prototype.hasUnitTag = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ResponseQueryAvailableAbilities.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.ResponseQueryAvailableAbilities, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ResponseQueryAvailableAbilities.displayName = 'proto.SC2APIProtocol.ResponseQueryAvailableAbilities';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ResponseQueryAvailableAbilities.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ResponseQueryAvailableAbilities} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilitiesList: jspb.Message.toObjectList(msg.getAbilitiesList(),
    s2clientprotocol_common_pb.AvailableAbility.toObject, includeInstance),
    unitTag: jspb.Message.getField(msg, 2),
    unitTypeId: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ResponseQueryAvailableAbilities}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ResponseQueryAvailableAbilities;
  return proto.SC2APIProtocol.ResponseQueryAvailableAbilities.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ResponseQueryAvailableAbilities} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ResponseQueryAvailableAbilities}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.AvailableAbility;
      reader.readMessage(value,s2clientprotocol_common_pb.AvailableAbility.deserializeBinaryFromReader);
      msg.addAbilities(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnitTag(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnitTypeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ResponseQueryAvailableAbilities.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ResponseQueryAvailableAbilities} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAbilitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      s2clientprotocol_common_pb.AvailableAbility.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated AvailableAbility abilities = 1;
 * @return {!Array.<!proto.SC2APIProtocol.AvailableAbility>}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.getAbilitiesList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.AvailableAbility>} */ (
    jspb.Message.getRepeatedWrapperField(this, s2clientprotocol_common_pb.AvailableAbility, 1));
};


/** @param {!Array.<!proto.SC2APIProtocol.AvailableAbility>} value */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.setAbilitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SC2APIProtocol.AvailableAbility=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.AvailableAbility}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.addAbilities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SC2APIProtocol.AvailableAbility, opt_index);
};


proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.clearAbilitiesList = function() {
  this.setAbilitiesList([]);
};


/**
 * optional uint64 unit_tag = 2;
 * @return {number}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.getUnitTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.setUnitTag = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.clearUnitTag = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.hasUnitTag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 unit_type_id = 3;
 * @return {number}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.getUnitTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.setUnitTypeId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.clearUnitTypeId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseQueryAvailableAbilities.prototype.hasUnitTypeId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.RequestQueryBuildingPlacement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.RequestQueryBuildingPlacement.displayName = 'proto.SC2APIProtocol.RequestQueryBuildingPlacement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.RequestQueryBuildingPlacement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.RequestQueryBuildingPlacement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityId: jspb.Message.getField(msg, 1),
    targetPos: (f = msg.getTargetPos()) && s2clientprotocol_common_pb.Point2D.toObject(includeInstance, f),
    placingUnitTag: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.RequestQueryBuildingPlacement}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.RequestQueryBuildingPlacement;
  return proto.SC2APIProtocol.RequestQueryBuildingPlacement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.RequestQueryBuildingPlacement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.RequestQueryBuildingPlacement}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAbilityId(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.Point2D;
      reader.readMessage(value,s2clientprotocol_common_pb.Point2D.deserializeBinaryFromReader);
      msg.setTargetPos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlacingUnitTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.RequestQueryBuildingPlacement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.RequestQueryBuildingPlacement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTargetPos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional int32 ability_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Point2D target_pos = 2;
 * @return {?proto.SC2APIProtocol.Point2D}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.getTargetPos = function() {
  return /** @type{?proto.SC2APIProtocol.Point2D} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point2D, 2));
};


/** @param {?proto.SC2APIProtocol.Point2D|undefined} value */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.setTargetPos = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.clearTargetPos = function() {
  this.setTargetPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.hasTargetPos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 placing_unit_tag = 3;
 * @return {number}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.getPlacingUnitTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.setPlacingUnitTag = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.clearPlacingUnitTag = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestQueryBuildingPlacement.prototype.hasPlacingUnitTag = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ResponseQueryBuildingPlacement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ResponseQueryBuildingPlacement.displayName = 'proto.SC2APIProtocol.ResponseQueryBuildingPlacement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ResponseQueryBuildingPlacement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ResponseQueryBuildingPlacement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ResponseQueryBuildingPlacement}
 */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ResponseQueryBuildingPlacement;
  return proto.SC2APIProtocol.ResponseQueryBuildingPlacement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ResponseQueryBuildingPlacement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ResponseQueryBuildingPlacement}
 */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SC2APIProtocol.ActionResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ResponseQueryBuildingPlacement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ResponseQueryBuildingPlacement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SC2APIProtocol.ActionResult} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ActionResult result = 1;
 * @return {!proto.SC2APIProtocol.ActionResult}
 */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement.prototype.getResult = function() {
  return /** @type {!proto.SC2APIProtocol.ActionResult} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.SC2APIProtocol.ActionResult} value */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ResponseQueryBuildingPlacement.prototype.clearResult = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseQueryBuildingPlacement.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.SC2APIProtocol);

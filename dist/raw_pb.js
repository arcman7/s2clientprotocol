/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var s2clientprotocol_common_pb = require('./common_pb.js');
goog.exportSymbol('proto.SC2APIProtocol.ActionRaw', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionRawCameraMove', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionRawToggleAutocast', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ActionRawUnitCommand', null, global);
goog.exportSymbol('proto.SC2APIProtocol.Alliance', null, global);
goog.exportSymbol('proto.SC2APIProtocol.CloakState', null, global);
goog.exportSymbol('proto.SC2APIProtocol.DisplayType', null, global);
goog.exportSymbol('proto.SC2APIProtocol.Effect', null, global);
goog.exportSymbol('proto.SC2APIProtocol.Event', null, global);
goog.exportSymbol('proto.SC2APIProtocol.MapState', null, global);
goog.exportSymbol('proto.SC2APIProtocol.ObservationRaw', null, global);
goog.exportSymbol('proto.SC2APIProtocol.PassengerUnit', null, global);
goog.exportSymbol('proto.SC2APIProtocol.PlayerRaw', null, global);
goog.exportSymbol('proto.SC2APIProtocol.PowerSource', null, global);
goog.exportSymbol('proto.SC2APIProtocol.RadarRing', null, global);
goog.exportSymbol('proto.SC2APIProtocol.RallyTarget', null, global);
goog.exportSymbol('proto.SC2APIProtocol.StartRaw', null, global);
goog.exportSymbol('proto.SC2APIProtocol.Unit', null, global);
goog.exportSymbol('proto.SC2APIProtocol.UnitOrder', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.StartRaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.StartRaw.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.StartRaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.StartRaw.displayName = 'proto.SC2APIProtocol.StartRaw';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.StartRaw.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.StartRaw.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.StartRaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.StartRaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.StartRaw.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapSize: (f = msg.getMapSize()) && s2clientprotocol_common_pb.Size2DI.toObject(includeInstance, f),
    pathingGrid: (f = msg.getPathingGrid()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    terrainHeight: (f = msg.getTerrainHeight()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    placementGrid: (f = msg.getPlacementGrid()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    playableArea: (f = msg.getPlayableArea()) && s2clientprotocol_common_pb.RectangleI.toObject(includeInstance, f),
    startLocationsList: jspb.Message.toObjectList(msg.getStartLocationsList(),
    s2clientprotocol_common_pb.Point2D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.StartRaw}
 */
proto.SC2APIProtocol.StartRaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.StartRaw;
  return proto.SC2APIProtocol.StartRaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.StartRaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.StartRaw}
 */
proto.SC2APIProtocol.StartRaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.Size2DI;
      reader.readMessage(value,s2clientprotocol_common_pb.Size2DI.deserializeBinaryFromReader);
      msg.setMapSize(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPathingGrid(value);
      break;
    case 3:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setTerrainHeight(value);
      break;
    case 4:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setPlacementGrid(value);
      break;
    case 5:
      var value = new s2clientprotocol_common_pb.RectangleI;
      reader.readMessage(value,s2clientprotocol_common_pb.RectangleI.deserializeBinaryFromReader);
      msg.setPlayableArea(value);
      break;
    case 6:
      var value = new s2clientprotocol_common_pb.Point2D;
      reader.readMessage(value,s2clientprotocol_common_pb.Point2D.deserializeBinaryFromReader);
      msg.addStartLocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.StartRaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.StartRaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.StartRaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.StartRaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapSize();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.Size2DI.serializeBinaryToWriter
    );
  }
  f = message.getPathingGrid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getTerrainHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPlacementGrid();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPlayableArea();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      s2clientprotocol_common_pb.RectangleI.serializeBinaryToWriter
    );
  }
  f = message.getStartLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      s2clientprotocol_common_pb.Point2D.serializeBinaryToWriter
    );
  }
};


/**
 * optional Size2DI map_size = 1;
 * @return {?proto.SC2APIProtocol.Size2DI}
 */
proto.SC2APIProtocol.StartRaw.prototype.getMapSize = function() {
  return /** @type{?proto.SC2APIProtocol.Size2DI} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Size2DI, 1));
};


/** @param {?proto.SC2APIProtocol.Size2DI|undefined} value */
proto.SC2APIProtocol.StartRaw.prototype.setMapSize = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.StartRaw.prototype.clearMapSize = function() {
  this.setMapSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.StartRaw.prototype.hasMapSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageData pathing_grid = 2;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.StartRaw.prototype.getPathingGrid = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 2));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.StartRaw.prototype.setPathingGrid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SC2APIProtocol.StartRaw.prototype.clearPathingGrid = function() {
  this.setPathingGrid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.StartRaw.prototype.hasPathingGrid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ImageData terrain_height = 3;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.StartRaw.prototype.getTerrainHeight = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 3));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.StartRaw.prototype.setTerrainHeight = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SC2APIProtocol.StartRaw.prototype.clearTerrainHeight = function() {
  this.setTerrainHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.StartRaw.prototype.hasTerrainHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ImageData placement_grid = 4;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.StartRaw.prototype.getPlacementGrid = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 4));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.StartRaw.prototype.setPlacementGrid = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SC2APIProtocol.StartRaw.prototype.clearPlacementGrid = function() {
  this.setPlacementGrid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.StartRaw.prototype.hasPlacementGrid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RectangleI playable_area = 5;
 * @return {?proto.SC2APIProtocol.RectangleI}
 */
proto.SC2APIProtocol.StartRaw.prototype.getPlayableArea = function() {
  return /** @type{?proto.SC2APIProtocol.RectangleI} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.RectangleI, 5));
};


/** @param {?proto.SC2APIProtocol.RectangleI|undefined} value */
proto.SC2APIProtocol.StartRaw.prototype.setPlayableArea = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.SC2APIProtocol.StartRaw.prototype.clearPlayableArea = function() {
  this.setPlayableArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.StartRaw.prototype.hasPlayableArea = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Point2D start_locations = 6;
 * @return {!Array.<!proto.SC2APIProtocol.Point2D>}
 */
proto.SC2APIProtocol.StartRaw.prototype.getStartLocationsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, s2clientprotocol_common_pb.Point2D, 6));
};


/** @param {!Array.<!proto.SC2APIProtocol.Point2D>} value */
proto.SC2APIProtocol.StartRaw.prototype.setStartLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.SC2APIProtocol.Point2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.Point2D}
 */
proto.SC2APIProtocol.StartRaw.prototype.addStartLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.SC2APIProtocol.Point2D, opt_index);
};


proto.SC2APIProtocol.StartRaw.prototype.clearStartLocationsList = function() {
  this.setStartLocationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ObservationRaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ObservationRaw.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.ObservationRaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ObservationRaw.displayName = 'proto.SC2APIProtocol.ObservationRaw';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ObservationRaw.repeatedFields_ = [2,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ObservationRaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ObservationRaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ObservationRaw.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.SC2APIProtocol.PlayerRaw.toObject(includeInstance, f),
    unitsList: jspb.Message.toObjectList(msg.getUnitsList(),
    proto.SC2APIProtocol.Unit.toObject, includeInstance),
    mapState: (f = msg.getMapState()) && proto.SC2APIProtocol.MapState.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.SC2APIProtocol.Event.toObject(includeInstance, f),
    effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.SC2APIProtocol.Effect.toObject, includeInstance),
    radarList: jspb.Message.toObjectList(msg.getRadarList(),
    proto.SC2APIProtocol.RadarRing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ObservationRaw}
 */
proto.SC2APIProtocol.ObservationRaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ObservationRaw;
  return proto.SC2APIProtocol.ObservationRaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ObservationRaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ObservationRaw}
 */
proto.SC2APIProtocol.ObservationRaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.PlayerRaw;
      reader.readMessage(value,proto.SC2APIProtocol.PlayerRaw.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.Unit;
      reader.readMessage(value,proto.SC2APIProtocol.Unit.deserializeBinaryFromReader);
      msg.addUnits(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.MapState;
      reader.readMessage(value,proto.SC2APIProtocol.MapState.deserializeBinaryFromReader);
      msg.setMapState(value);
      break;
    case 4:
      var value = new proto.SC2APIProtocol.Event;
      reader.readMessage(value,proto.SC2APIProtocol.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 5:
      var value = new proto.SC2APIProtocol.Effect;
      reader.readMessage(value,proto.SC2APIProtocol.Effect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    case 6:
      var value = new proto.SC2APIProtocol.RadarRing;
      reader.readMessage(value,proto.SC2APIProtocol.RadarRing.deserializeBinaryFromReader);
      msg.addRadar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ObservationRaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ObservationRaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ObservationRaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.PlayerRaw.serializeBinaryToWriter
    );
  }
  f = message.getUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SC2APIProtocol.Unit.serializeBinaryToWriter
    );
  }
  f = message.getMapState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SC2APIProtocol.MapState.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SC2APIProtocol.Event.serializeBinaryToWriter
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.SC2APIProtocol.Effect.serializeBinaryToWriter
    );
  }
  f = message.getRadarList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.SC2APIProtocol.RadarRing.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayerRaw player = 1;
 * @return {?proto.SC2APIProtocol.PlayerRaw}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.getPlayer = function() {
  return /** @type{?proto.SC2APIProtocol.PlayerRaw} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.PlayerRaw, 1));
};


/** @param {?proto.SC2APIProtocol.PlayerRaw|undefined} value */
proto.SC2APIProtocol.ObservationRaw.prototype.setPlayer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.ObservationRaw.prototype.clearPlayer = function() {
  this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Unit units = 2;
 * @return {!Array.<!proto.SC2APIProtocol.Unit>}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.getUnitsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.Unit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.Unit, 2));
};


/** @param {!Array.<!proto.SC2APIProtocol.Unit>} value */
proto.SC2APIProtocol.ObservationRaw.prototype.setUnitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SC2APIProtocol.Unit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.Unit}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.addUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SC2APIProtocol.Unit, opt_index);
};


proto.SC2APIProtocol.ObservationRaw.prototype.clearUnitsList = function() {
  this.setUnitsList([]);
};


/**
 * optional MapState map_state = 3;
 * @return {?proto.SC2APIProtocol.MapState}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.getMapState = function() {
  return /** @type{?proto.SC2APIProtocol.MapState} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.MapState, 3));
};


/** @param {?proto.SC2APIProtocol.MapState|undefined} value */
proto.SC2APIProtocol.ObservationRaw.prototype.setMapState = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SC2APIProtocol.ObservationRaw.prototype.clearMapState = function() {
  this.setMapState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.hasMapState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Event event = 4;
 * @return {?proto.SC2APIProtocol.Event}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.getEvent = function() {
  return /** @type{?proto.SC2APIProtocol.Event} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.Event, 4));
};


/** @param {?proto.SC2APIProtocol.Event|undefined} value */
proto.SC2APIProtocol.ObservationRaw.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SC2APIProtocol.ObservationRaw.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Effect effects = 5;
 * @return {!Array.<!proto.SC2APIProtocol.Effect>}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.getEffectsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.Effect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.Effect, 5));
};


/** @param {!Array.<!proto.SC2APIProtocol.Effect>} value */
proto.SC2APIProtocol.ObservationRaw.prototype.setEffectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.SC2APIProtocol.Effect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.Effect}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.SC2APIProtocol.Effect, opt_index);
};


proto.SC2APIProtocol.ObservationRaw.prototype.clearEffectsList = function() {
  this.setEffectsList([]);
};


/**
 * repeated RadarRing radar = 6;
 * @return {!Array.<!proto.SC2APIProtocol.RadarRing>}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.getRadarList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.RadarRing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.RadarRing, 6));
};


/** @param {!Array.<!proto.SC2APIProtocol.RadarRing>} value */
proto.SC2APIProtocol.ObservationRaw.prototype.setRadarList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.SC2APIProtocol.RadarRing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.RadarRing}
 */
proto.SC2APIProtocol.ObservationRaw.prototype.addRadar = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.SC2APIProtocol.RadarRing, opt_index);
};


proto.SC2APIProtocol.ObservationRaw.prototype.clearRadarList = function() {
  this.setRadarList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.RadarRing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.RadarRing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.RadarRing.displayName = 'proto.SC2APIProtocol.RadarRing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.RadarRing.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.RadarRing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.RadarRing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RadarRing.toObject = function(includeInstance, msg) {
  var f, obj = {
    pos: (f = msg.getPos()) && s2clientprotocol_common_pb.Point.toObject(includeInstance, f),
    radius: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.RadarRing}
 */
proto.SC2APIProtocol.RadarRing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.RadarRing;
  return proto.SC2APIProtocol.RadarRing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.RadarRing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.RadarRing}
 */
proto.SC2APIProtocol.RadarRing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.Point;
      reader.readMessage(value,s2clientprotocol_common_pb.Point.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RadarRing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.RadarRing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.RadarRing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RadarRing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.Point.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional Point pos = 1;
 * @return {?proto.SC2APIProtocol.Point}
 */
proto.SC2APIProtocol.RadarRing.prototype.getPos = function() {
  return /** @type{?proto.SC2APIProtocol.Point} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point, 1));
};


/** @param {?proto.SC2APIProtocol.Point|undefined} value */
proto.SC2APIProtocol.RadarRing.prototype.setPos = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.RadarRing.prototype.clearPos = function() {
  this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RadarRing.prototype.hasPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float radius = 2;
 * @return {number}
 */
proto.SC2APIProtocol.RadarRing.prototype.getRadius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.RadarRing.prototype.setRadius = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.RadarRing.prototype.clearRadius = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RadarRing.prototype.hasRadius = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.PowerSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.PowerSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.PowerSource.displayName = 'proto.SC2APIProtocol.PowerSource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.PowerSource.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.PowerSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.PowerSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.PowerSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    pos: (f = msg.getPos()) && s2clientprotocol_common_pb.Point.toObject(includeInstance, f),
    radius: jspb.Message.getOptionalFloatingPointField(msg, 2),
    tag: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.PowerSource}
 */
proto.SC2APIProtocol.PowerSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.PowerSource;
  return proto.SC2APIProtocol.PowerSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.PowerSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.PowerSource}
 */
proto.SC2APIProtocol.PowerSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.Point;
      reader.readMessage(value,s2clientprotocol_common_pb.Point.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.PowerSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.PowerSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.PowerSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.PowerSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.Point.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional Point pos = 1;
 * @return {?proto.SC2APIProtocol.Point}
 */
proto.SC2APIProtocol.PowerSource.prototype.getPos = function() {
  return /** @type{?proto.SC2APIProtocol.Point} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point, 1));
};


/** @param {?proto.SC2APIProtocol.Point|undefined} value */
proto.SC2APIProtocol.PowerSource.prototype.setPos = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.PowerSource.prototype.clearPos = function() {
  this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PowerSource.prototype.hasPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float radius = 2;
 * @return {number}
 */
proto.SC2APIProtocol.PowerSource.prototype.getRadius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.PowerSource.prototype.setRadius = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.PowerSource.prototype.clearRadius = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PowerSource.prototype.hasRadius = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 tag = 3;
 * @return {number}
 */
proto.SC2APIProtocol.PowerSource.prototype.getTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PowerSource.prototype.setTag = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.PowerSource.prototype.clearTag = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PowerSource.prototype.hasTag = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.PlayerRaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.PlayerRaw.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.PlayerRaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.PlayerRaw.displayName = 'proto.SC2APIProtocol.PlayerRaw';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.PlayerRaw.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.PlayerRaw.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.PlayerRaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.PlayerRaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.PlayerRaw.toObject = function(includeInstance, msg) {
  var f, obj = {
    powerSourcesList: jspb.Message.toObjectList(msg.getPowerSourcesList(),
    proto.SC2APIProtocol.PowerSource.toObject, includeInstance),
    camera: (f = msg.getCamera()) && s2clientprotocol_common_pb.Point.toObject(includeInstance, f),
    upgradeIdsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.PlayerRaw}
 */
proto.SC2APIProtocol.PlayerRaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.PlayerRaw;
  return proto.SC2APIProtocol.PlayerRaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.PlayerRaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.PlayerRaw}
 */
proto.SC2APIProtocol.PlayerRaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.PowerSource;
      reader.readMessage(value,proto.SC2APIProtocol.PowerSource.deserializeBinaryFromReader);
      msg.addPowerSources(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.Point;
      reader.readMessage(value,s2clientprotocol_common_pb.Point.deserializeBinaryFromReader);
      msg.setCamera(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addUpgradeIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.PlayerRaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.PlayerRaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.PlayerRaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.PlayerRaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPowerSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SC2APIProtocol.PowerSource.serializeBinaryToWriter
    );
  }
  f = message.getCamera();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getUpgradeIdsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
};


/**
 * repeated PowerSource power_sources = 1;
 * @return {!Array.<!proto.SC2APIProtocol.PowerSource>}
 */
proto.SC2APIProtocol.PlayerRaw.prototype.getPowerSourcesList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.PowerSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.PowerSource, 1));
};


/** @param {!Array.<!proto.SC2APIProtocol.PowerSource>} value */
proto.SC2APIProtocol.PlayerRaw.prototype.setPowerSourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SC2APIProtocol.PowerSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.PowerSource}
 */
proto.SC2APIProtocol.PlayerRaw.prototype.addPowerSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SC2APIProtocol.PowerSource, opt_index);
};


proto.SC2APIProtocol.PlayerRaw.prototype.clearPowerSourcesList = function() {
  this.setPowerSourcesList([]);
};


/**
 * optional Point camera = 2;
 * @return {?proto.SC2APIProtocol.Point}
 */
proto.SC2APIProtocol.PlayerRaw.prototype.getCamera = function() {
  return /** @type{?proto.SC2APIProtocol.Point} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point, 2));
};


/** @param {?proto.SC2APIProtocol.Point|undefined} value */
proto.SC2APIProtocol.PlayerRaw.prototype.setCamera = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SC2APIProtocol.PlayerRaw.prototype.clearCamera = function() {
  this.setCamera(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerRaw.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated uint32 upgrade_ids = 3;
 * @return {!Array.<number>}
 */
proto.SC2APIProtocol.PlayerRaw.prototype.getUpgradeIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.SC2APIProtocol.PlayerRaw.prototype.setUpgradeIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SC2APIProtocol.PlayerRaw.prototype.addUpgradeIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.SC2APIProtocol.PlayerRaw.prototype.clearUpgradeIdsList = function() {
  this.setUpgradeIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.UnitOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SC2APIProtocol.UnitOrder.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.UnitOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.UnitOrder.displayName = 'proto.SC2APIProtocol.UnitOrder';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.UnitOrder.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.UnitOrder.TargetCase = {
  TARGET_NOT_SET: 0,
  TARGET_WORLD_SPACE_POS: 2,
  TARGET_UNIT_TAG: 3
};

/**
 * @return {proto.SC2APIProtocol.UnitOrder.TargetCase}
 */
proto.SC2APIProtocol.UnitOrder.prototype.getTargetCase = function() {
  return /** @type {proto.SC2APIProtocol.UnitOrder.TargetCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.UnitOrder.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.UnitOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.UnitOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.UnitOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.UnitOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityId: jspb.Message.getField(msg, 1),
    targetWorldSpacePos: (f = msg.getTargetWorldSpacePos()) && s2clientprotocol_common_pb.Point.toObject(includeInstance, f),
    targetUnitTag: jspb.Message.getField(msg, 3),
    progress: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.UnitOrder}
 */
proto.SC2APIProtocol.UnitOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.UnitOrder;
  return proto.SC2APIProtocol.UnitOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.UnitOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.UnitOrder}
 */
proto.SC2APIProtocol.UnitOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilityId(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.Point;
      reader.readMessage(value,s2clientprotocol_common_pb.Point.deserializeBinaryFromReader);
      msg.setTargetWorldSpacePos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTargetUnitTag(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.UnitOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.UnitOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.UnitOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.UnitOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTargetWorldSpacePos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.Point.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint32 ability_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.UnitOrder.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitOrder.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.UnitOrder.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitOrder.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Point target_world_space_pos = 2;
 * @return {?proto.SC2APIProtocol.Point}
 */
proto.SC2APIProtocol.UnitOrder.prototype.getTargetWorldSpacePos = function() {
  return /** @type{?proto.SC2APIProtocol.Point} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point, 2));
};


/** @param {?proto.SC2APIProtocol.Point|undefined} value */
proto.SC2APIProtocol.UnitOrder.prototype.setTargetWorldSpacePos = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SC2APIProtocol.UnitOrder.oneofGroups_[0], value);
};


proto.SC2APIProtocol.UnitOrder.prototype.clearTargetWorldSpacePos = function() {
  this.setTargetWorldSpacePos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitOrder.prototype.hasTargetWorldSpacePos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 target_unit_tag = 3;
 * @return {number}
 */
proto.SC2APIProtocol.UnitOrder.prototype.getTargetUnitTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitOrder.prototype.setTargetUnitTag = function(value) {
  jspb.Message.setOneofField(this, 3, proto.SC2APIProtocol.UnitOrder.oneofGroups_[0], value);
};


proto.SC2APIProtocol.UnitOrder.prototype.clearTargetUnitTag = function() {
  jspb.Message.setOneofField(this, 3, proto.SC2APIProtocol.UnitOrder.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitOrder.prototype.hasTargetUnitTag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float progress = 4;
 * @return {number}
 */
proto.SC2APIProtocol.UnitOrder.prototype.getProgress = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.UnitOrder.prototype.setProgress = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.UnitOrder.prototype.clearProgress = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.UnitOrder.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.PassengerUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.PassengerUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.PassengerUnit.displayName = 'proto.SC2APIProtocol.PassengerUnit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.PassengerUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.PassengerUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.PassengerUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getField(msg, 1),
    health: jspb.Message.getOptionalFloatingPointField(msg, 2),
    healthMax: jspb.Message.getOptionalFloatingPointField(msg, 3),
    shield: jspb.Message.getOptionalFloatingPointField(msg, 4),
    shieldMax: jspb.Message.getOptionalFloatingPointField(msg, 7),
    energy: jspb.Message.getOptionalFloatingPointField(msg, 5),
    energyMax: jspb.Message.getOptionalFloatingPointField(msg, 8),
    unitType: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.PassengerUnit}
 */
proto.SC2APIProtocol.PassengerUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.PassengerUnit;
  return proto.SC2APIProtocol.PassengerUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.PassengerUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.PassengerUnit}
 */
proto.SC2APIProtocol.PassengerUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealthMax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShield(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShieldMax(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEnergy(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEnergyMax(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnitType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.PassengerUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.PassengerUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.PassengerUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint64 tag = 1;
 * @return {number}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.getTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PassengerUnit.prototype.setTag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.PassengerUnit.prototype.clearTag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.hasTag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float health = 2;
 * @return {number}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.getHealth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.PassengerUnit.prototype.setHealth = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.PassengerUnit.prototype.clearHealth = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.hasHealth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float health_max = 3;
 * @return {number}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.getHealthMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.PassengerUnit.prototype.setHealthMax = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.PassengerUnit.prototype.clearHealthMax = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.hasHealthMax = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float shield = 4;
 * @return {number}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.getShield = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.PassengerUnit.prototype.setShield = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.PassengerUnit.prototype.clearShield = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.hasShield = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float shield_max = 7;
 * @return {number}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.getShieldMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.PassengerUnit.prototype.setShieldMax = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SC2APIProtocol.PassengerUnit.prototype.clearShieldMax = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.hasShieldMax = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float energy = 5;
 * @return {number}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.getEnergy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.PassengerUnit.prototype.setEnergy = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.PassengerUnit.prototype.clearEnergy = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.hasEnergy = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float energy_max = 8;
 * @return {number}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.getEnergyMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.PassengerUnit.prototype.setEnergyMax = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.SC2APIProtocol.PassengerUnit.prototype.clearEnergyMax = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.hasEnergyMax = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 unit_type = 6;
 * @return {number}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.getUnitType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PassengerUnit.prototype.setUnitType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.PassengerUnit.prototype.clearUnitType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PassengerUnit.prototype.hasUnitType = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.RallyTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.RallyTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.RallyTarget.displayName = 'proto.SC2APIProtocol.RallyTarget';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.RallyTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.RallyTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.RallyTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RallyTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    point: (f = msg.getPoint()) && s2clientprotocol_common_pb.Point.toObject(includeInstance, f),
    tag: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.RallyTarget}
 */
proto.SC2APIProtocol.RallyTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.RallyTarget;
  return proto.SC2APIProtocol.RallyTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.RallyTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.RallyTarget}
 */
proto.SC2APIProtocol.RallyTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.Point;
      reader.readMessage(value,s2clientprotocol_common_pb.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RallyTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.RallyTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.RallyTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RallyTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.Point.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional Point point = 1;
 * @return {?proto.SC2APIProtocol.Point}
 */
proto.SC2APIProtocol.RallyTarget.prototype.getPoint = function() {
  return /** @type{?proto.SC2APIProtocol.Point} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point, 1));
};


/** @param {?proto.SC2APIProtocol.Point|undefined} value */
proto.SC2APIProtocol.RallyTarget.prototype.setPoint = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.RallyTarget.prototype.clearPoint = function() {
  this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RallyTarget.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 tag = 2;
 * @return {number}
 */
proto.SC2APIProtocol.RallyTarget.prototype.getTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.RallyTarget.prototype.setTag = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.RallyTarget.prototype.clearTag = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RallyTarget.prototype.hasTag = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.Unit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.Unit.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.Unit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.Unit.displayName = 'proto.SC2APIProtocol.Unit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.Unit.repeatedFields_ = [27,22,24,45];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.Unit.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.Unit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.Unit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Unit.toObject = function(includeInstance, msg) {
  var f, obj = {
    displayType: jspb.Message.getField(msg, 1),
    alliance: jspb.Message.getField(msg, 2),
    tag: jspb.Message.getField(msg, 3),
    unitType: jspb.Message.getField(msg, 4),
    owner: jspb.Message.getField(msg, 5),
    pos: (f = msg.getPos()) && s2clientprotocol_common_pb.Point.toObject(includeInstance, f),
    facing: jspb.Message.getOptionalFloatingPointField(msg, 7),
    radius: jspb.Message.getOptionalFloatingPointField(msg, 8),
    buildProgress: jspb.Message.getOptionalFloatingPointField(msg, 9),
    cloak: jspb.Message.getField(msg, 10),
    buffIdsList: jspb.Message.getRepeatedField(msg, 27),
    detectRange: jspb.Message.getOptionalFloatingPointField(msg, 31),
    radarRange: jspb.Message.getOptionalFloatingPointField(msg, 32),
    isSelected: jspb.Message.getField(msg, 11),
    isOnScreen: jspb.Message.getField(msg, 12),
    isBlip: jspb.Message.getField(msg, 13),
    isPowered: jspb.Message.getField(msg, 35),
    isActive: jspb.Message.getField(msg, 39),
    attackUpgradeLevel: jspb.Message.getField(msg, 40),
    armorUpgradeLevel: jspb.Message.getField(msg, 41),
    shieldUpgradeLevel: jspb.Message.getField(msg, 42),
    health: jspb.Message.getOptionalFloatingPointField(msg, 14),
    healthMax: jspb.Message.getOptionalFloatingPointField(msg, 15),
    shield: jspb.Message.getOptionalFloatingPointField(msg, 16),
    shieldMax: jspb.Message.getOptionalFloatingPointField(msg, 36),
    energy: jspb.Message.getOptionalFloatingPointField(msg, 17),
    energyMax: jspb.Message.getOptionalFloatingPointField(msg, 37),
    mineralContents: jspb.Message.getField(msg, 18),
    vespeneContents: jspb.Message.getField(msg, 19),
    isFlying: jspb.Message.getField(msg, 20),
    isBurrowed: jspb.Message.getField(msg, 21),
    isHallucination: jspb.Message.getField(msg, 38),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.SC2APIProtocol.UnitOrder.toObject, includeInstance),
    addOnTag: jspb.Message.getField(msg, 23),
    passengersList: jspb.Message.toObjectList(msg.getPassengersList(),
    proto.SC2APIProtocol.PassengerUnit.toObject, includeInstance),
    cargoSpaceTaken: jspb.Message.getField(msg, 25),
    cargoSpaceMax: jspb.Message.getField(msg, 26),
    assignedHarvesters: jspb.Message.getField(msg, 28),
    idealHarvesters: jspb.Message.getField(msg, 29),
    weaponCooldown: jspb.Message.getOptionalFloatingPointField(msg, 30),
    engagedTargetTag: jspb.Message.getField(msg, 34),
    buffDurationRemain: jspb.Message.getField(msg, 43),
    buffDurationMax: jspb.Message.getField(msg, 44),
    rallyTargetsList: jspb.Message.toObjectList(msg.getRallyTargetsList(),
    proto.SC2APIProtocol.RallyTarget.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.Unit}
 */
proto.SC2APIProtocol.Unit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.Unit;
  return proto.SC2APIProtocol.Unit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.Unit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.Unit}
 */
proto.SC2APIProtocol.Unit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SC2APIProtocol.DisplayType} */ (reader.readEnum());
      msg.setDisplayType(value);
      break;
    case 2:
      var value = /** @type {!proto.SC2APIProtocol.Alliance} */ (reader.readEnum());
      msg.setAlliance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTag(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnitType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwner(value);
      break;
    case 6:
      var value = new s2clientprotocol_common_pb.Point;
      reader.readMessage(value,s2clientprotocol_common_pb.Point.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFacing(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBuildProgress(value);
      break;
    case 10:
      var value = /** @type {!proto.SC2APIProtocol.CloakState} */ (reader.readEnum());
      msg.setCloak(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addBuffIds(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDetectRange(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadarRange(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSelected(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOnScreen(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBlip(value);
      break;
    case 35:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPowered(value);
      break;
    case 39:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackUpgradeLevel(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArmorUpgradeLevel(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShieldUpgradeLevel(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealth(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealthMax(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShield(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShieldMax(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEnergy(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEnergyMax(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMineralContents(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVespeneContents(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFlying(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBurrowed(value);
      break;
    case 38:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHallucination(value);
      break;
    case 22:
      var value = new proto.SC2APIProtocol.UnitOrder;
      reader.readMessage(value,proto.SC2APIProtocol.UnitOrder.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAddOnTag(value);
      break;
    case 24:
      var value = new proto.SC2APIProtocol.PassengerUnit;
      reader.readMessage(value,proto.SC2APIProtocol.PassengerUnit.deserializeBinaryFromReader);
      msg.addPassengers(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCargoSpaceTaken(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCargoSpaceMax(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAssignedHarvesters(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdealHarvesters(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeaponCooldown(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEngagedTargetTag(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBuffDurationRemain(value);
      break;
    case 44:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBuffDurationMax(value);
      break;
    case 45:
      var value = new proto.SC2APIProtocol.RallyTarget;
      reader.readMessage(value,proto.SC2APIProtocol.RallyTarget.deserializeBinaryFromReader);
      msg.addRallyTargets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.Unit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.Unit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.Unit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Unit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SC2APIProtocol.DisplayType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.SC2APIProtocol.Alliance} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      s2clientprotocol_common_pb.Point.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {!proto.SC2APIProtocol.CloakState} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getBuffIdsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeFloat(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeFloat(
      32,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeBool(
      35,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 39));
  if (f != null) {
    writer.writeBool(
      39,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 40));
  if (f != null) {
    writer.writeInt32(
      40,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 41));
  if (f != null) {
    writer.writeInt32(
      41,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 42));
  if (f != null) {
    writer.writeInt32(
      42,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 36));
  if (f != null) {
    writer.writeFloat(
      36,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 37));
  if (f != null) {
    writer.writeFloat(
      37,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeBool(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 38));
  if (f != null) {
    writer.writeBool(
      38,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.SC2APIProtocol.UnitOrder.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeUint64(
      23,
      f
    );
  }
  f = message.getPassengersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      24,
      f,
      proto.SC2APIProtocol.PassengerUnit.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeInt32(
      28,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeInt32(
      29,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeFloat(
      30,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 34));
  if (f != null) {
    writer.writeUint64(
      34,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 43));
  if (f != null) {
    writer.writeInt32(
      43,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 44));
  if (f != null) {
    writer.writeInt32(
      44,
      f
    );
  }
  f = message.getRallyTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      45,
      f,
      proto.SC2APIProtocol.RallyTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional DisplayType display_type = 1;
 * @return {!proto.SC2APIProtocol.DisplayType}
 */
proto.SC2APIProtocol.Unit.prototype.getDisplayType = function() {
  return /** @type {!proto.SC2APIProtocol.DisplayType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.SC2APIProtocol.DisplayType} value */
proto.SC2APIProtocol.Unit.prototype.setDisplayType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.Unit.prototype.clearDisplayType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasDisplayType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Alliance alliance = 2;
 * @return {!proto.SC2APIProtocol.Alliance}
 */
proto.SC2APIProtocol.Unit.prototype.getAlliance = function() {
  return /** @type {!proto.SC2APIProtocol.Alliance} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.SC2APIProtocol.Alliance} value */
proto.SC2APIProtocol.Unit.prototype.setAlliance = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.Unit.prototype.clearAlliance = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasAlliance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 tag = 3;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setTag = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.Unit.prototype.clearTag = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasTag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 unit_type = 4;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getUnitType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setUnitType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.Unit.prototype.clearUnitType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasUnitType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 owner = 5;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getOwner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.Unit.prototype.clearOwner = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Point pos = 6;
 * @return {?proto.SC2APIProtocol.Point}
 */
proto.SC2APIProtocol.Unit.prototype.getPos = function() {
  return /** @type{?proto.SC2APIProtocol.Point} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point, 6));
};


/** @param {?proto.SC2APIProtocol.Point|undefined} value */
proto.SC2APIProtocol.Unit.prototype.setPos = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.SC2APIProtocol.Unit.prototype.clearPos = function() {
  this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasPos = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float facing = 7;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getFacing = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setFacing = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SC2APIProtocol.Unit.prototype.clearFacing = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasFacing = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float radius = 8;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getRadius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setRadius = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.SC2APIProtocol.Unit.prototype.clearRadius = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasRadius = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float build_progress = 9;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getBuildProgress = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setBuildProgress = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.SC2APIProtocol.Unit.prototype.clearBuildProgress = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasBuildProgress = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CloakState cloak = 10;
 * @return {!proto.SC2APIProtocol.CloakState}
 */
proto.SC2APIProtocol.Unit.prototype.getCloak = function() {
  return /** @type {!proto.SC2APIProtocol.CloakState} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.SC2APIProtocol.CloakState} value */
proto.SC2APIProtocol.Unit.prototype.setCloak = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.SC2APIProtocol.Unit.prototype.clearCloak = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasCloak = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated uint32 buff_ids = 27;
 * @return {!Array.<number>}
 */
proto.SC2APIProtocol.Unit.prototype.getBuffIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 27));
};


/** @param {!Array.<number>} value */
proto.SC2APIProtocol.Unit.prototype.setBuffIdsList = function(value) {
  jspb.Message.setField(this, 27, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SC2APIProtocol.Unit.prototype.addBuffIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 27, value, opt_index);
};


proto.SC2APIProtocol.Unit.prototype.clearBuffIdsList = function() {
  this.setBuffIdsList([]);
};


/**
 * optional float detect_range = 31;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getDetectRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 31, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setDetectRange = function(value) {
  jspb.Message.setField(this, 31, value);
};


proto.SC2APIProtocol.Unit.prototype.clearDetectRange = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasDetectRange = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional float radar_range = 32;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getRadarRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 32, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setRadarRange = function(value) {
  jspb.Message.setField(this, 32, value);
};


proto.SC2APIProtocol.Unit.prototype.clearRadarRange = function() {
  jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasRadarRange = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional bool is_selected = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.Unit.prototype.getIsSelected = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.Unit.prototype.setIsSelected = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.SC2APIProtocol.Unit.prototype.clearIsSelected = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasIsSelected = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool is_on_screen = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.Unit.prototype.getIsOnScreen = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.Unit.prototype.setIsOnScreen = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.SC2APIProtocol.Unit.prototype.clearIsOnScreen = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasIsOnScreen = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool is_blip = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.Unit.prototype.getIsBlip = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.Unit.prototype.setIsBlip = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.SC2APIProtocol.Unit.prototype.clearIsBlip = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasIsBlip = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool is_powered = 35;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.Unit.prototype.getIsPowered = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 35, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.Unit.prototype.setIsPowered = function(value) {
  jspb.Message.setField(this, 35, value);
};


proto.SC2APIProtocol.Unit.prototype.clearIsPowered = function() {
  jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasIsPowered = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional bool is_active = 39;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.Unit.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 39, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.Unit.prototype.setIsActive = function(value) {
  jspb.Message.setField(this, 39, value);
};


proto.SC2APIProtocol.Unit.prototype.clearIsActive = function() {
  jspb.Message.setField(this, 39, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasIsActive = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional int32 attack_upgrade_level = 40;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getAttackUpgradeLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setAttackUpgradeLevel = function(value) {
  jspb.Message.setField(this, 40, value);
};


proto.SC2APIProtocol.Unit.prototype.clearAttackUpgradeLevel = function() {
  jspb.Message.setField(this, 40, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasAttackUpgradeLevel = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional int32 armor_upgrade_level = 41;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getArmorUpgradeLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setArmorUpgradeLevel = function(value) {
  jspb.Message.setField(this, 41, value);
};


proto.SC2APIProtocol.Unit.prototype.clearArmorUpgradeLevel = function() {
  jspb.Message.setField(this, 41, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasArmorUpgradeLevel = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional int32 shield_upgrade_level = 42;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getShieldUpgradeLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setShieldUpgradeLevel = function(value) {
  jspb.Message.setField(this, 42, value);
};


proto.SC2APIProtocol.Unit.prototype.clearShieldUpgradeLevel = function() {
  jspb.Message.setField(this, 42, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasShieldUpgradeLevel = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional float health = 14;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getHealth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setHealth = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.SC2APIProtocol.Unit.prototype.clearHealth = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasHealth = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float health_max = 15;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getHealthMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setHealthMax = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.SC2APIProtocol.Unit.prototype.clearHealthMax = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasHealthMax = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float shield = 16;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getShield = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setShield = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.SC2APIProtocol.Unit.prototype.clearShield = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasShield = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional float shield_max = 36;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getShieldMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 36, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setShieldMax = function(value) {
  jspb.Message.setField(this, 36, value);
};


proto.SC2APIProtocol.Unit.prototype.clearShieldMax = function() {
  jspb.Message.setField(this, 36, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasShieldMax = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional float energy = 17;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getEnergy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setEnergy = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.SC2APIProtocol.Unit.prototype.clearEnergy = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasEnergy = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional float energy_max = 37;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getEnergyMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 37, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setEnergyMax = function(value) {
  jspb.Message.setField(this, 37, value);
};


proto.SC2APIProtocol.Unit.prototype.clearEnergyMax = function() {
  jspb.Message.setField(this, 37, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasEnergyMax = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional int32 mineral_contents = 18;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getMineralContents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setMineralContents = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.SC2APIProtocol.Unit.prototype.clearMineralContents = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasMineralContents = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int32 vespene_contents = 19;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getVespeneContents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setVespeneContents = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.SC2APIProtocol.Unit.prototype.clearVespeneContents = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasVespeneContents = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bool is_flying = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.Unit.prototype.getIsFlying = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.Unit.prototype.setIsFlying = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.SC2APIProtocol.Unit.prototype.clearIsFlying = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasIsFlying = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional bool is_burrowed = 21;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.Unit.prototype.getIsBurrowed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 21, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.Unit.prototype.setIsBurrowed = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.SC2APIProtocol.Unit.prototype.clearIsBurrowed = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasIsBurrowed = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool is_hallucination = 38;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.Unit.prototype.getIsHallucination = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 38, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.Unit.prototype.setIsHallucination = function(value) {
  jspb.Message.setField(this, 38, value);
};


proto.SC2APIProtocol.Unit.prototype.clearIsHallucination = function() {
  jspb.Message.setField(this, 38, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasIsHallucination = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * repeated UnitOrder orders = 22;
 * @return {!Array.<!proto.SC2APIProtocol.UnitOrder>}
 */
proto.SC2APIProtocol.Unit.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.UnitOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.UnitOrder, 22));
};


/** @param {!Array.<!proto.SC2APIProtocol.UnitOrder>} value */
proto.SC2APIProtocol.Unit.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.SC2APIProtocol.UnitOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.UnitOrder}
 */
proto.SC2APIProtocol.Unit.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.SC2APIProtocol.UnitOrder, opt_index);
};


proto.SC2APIProtocol.Unit.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};


/**
 * optional uint64 add_on_tag = 23;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getAddOnTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setAddOnTag = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.SC2APIProtocol.Unit.prototype.clearAddOnTag = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasAddOnTag = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * repeated PassengerUnit passengers = 24;
 * @return {!Array.<!proto.SC2APIProtocol.PassengerUnit>}
 */
proto.SC2APIProtocol.Unit.prototype.getPassengersList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.PassengerUnit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.PassengerUnit, 24));
};


/** @param {!Array.<!proto.SC2APIProtocol.PassengerUnit>} value */
proto.SC2APIProtocol.Unit.prototype.setPassengersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 24, value);
};


/**
 * @param {!proto.SC2APIProtocol.PassengerUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.PassengerUnit}
 */
proto.SC2APIProtocol.Unit.prototype.addPassengers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 24, opt_value, proto.SC2APIProtocol.PassengerUnit, opt_index);
};


proto.SC2APIProtocol.Unit.prototype.clearPassengersList = function() {
  this.setPassengersList([]);
};


/**
 * optional int32 cargo_space_taken = 25;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getCargoSpaceTaken = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setCargoSpaceTaken = function(value) {
  jspb.Message.setField(this, 25, value);
};


proto.SC2APIProtocol.Unit.prototype.clearCargoSpaceTaken = function() {
  jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasCargoSpaceTaken = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional int32 cargo_space_max = 26;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getCargoSpaceMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setCargoSpaceMax = function(value) {
  jspb.Message.setField(this, 26, value);
};


proto.SC2APIProtocol.Unit.prototype.clearCargoSpaceMax = function() {
  jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasCargoSpaceMax = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional int32 assigned_harvesters = 28;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getAssignedHarvesters = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setAssignedHarvesters = function(value) {
  jspb.Message.setField(this, 28, value);
};


proto.SC2APIProtocol.Unit.prototype.clearAssignedHarvesters = function() {
  jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasAssignedHarvesters = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional int32 ideal_harvesters = 29;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getIdealHarvesters = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setIdealHarvesters = function(value) {
  jspb.Message.setField(this, 29, value);
};


proto.SC2APIProtocol.Unit.prototype.clearIdealHarvesters = function() {
  jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasIdealHarvesters = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional float weapon_cooldown = 30;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getWeaponCooldown = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 30, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setWeaponCooldown = function(value) {
  jspb.Message.setField(this, 30, value);
};


proto.SC2APIProtocol.Unit.prototype.clearWeaponCooldown = function() {
  jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasWeaponCooldown = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional uint64 engaged_target_tag = 34;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getEngagedTargetTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setEngagedTargetTag = function(value) {
  jspb.Message.setField(this, 34, value);
};


proto.SC2APIProtocol.Unit.prototype.clearEngagedTargetTag = function() {
  jspb.Message.setField(this, 34, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasEngagedTargetTag = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional int32 buff_duration_remain = 43;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getBuffDurationRemain = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setBuffDurationRemain = function(value) {
  jspb.Message.setField(this, 43, value);
};


proto.SC2APIProtocol.Unit.prototype.clearBuffDurationRemain = function() {
  jspb.Message.setField(this, 43, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasBuffDurationRemain = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional int32 buff_duration_max = 44;
 * @return {number}
 */
proto.SC2APIProtocol.Unit.prototype.getBuffDurationMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 44, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Unit.prototype.setBuffDurationMax = function(value) {
  jspb.Message.setField(this, 44, value);
};


proto.SC2APIProtocol.Unit.prototype.clearBuffDurationMax = function() {
  jspb.Message.setField(this, 44, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Unit.prototype.hasBuffDurationMax = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * repeated RallyTarget rally_targets = 45;
 * @return {!Array.<!proto.SC2APIProtocol.RallyTarget>}
 */
proto.SC2APIProtocol.Unit.prototype.getRallyTargetsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.RallyTarget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.RallyTarget, 45));
};


/** @param {!Array.<!proto.SC2APIProtocol.RallyTarget>} value */
proto.SC2APIProtocol.Unit.prototype.setRallyTargetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 45, value);
};


/**
 * @param {!proto.SC2APIProtocol.RallyTarget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.RallyTarget}
 */
proto.SC2APIProtocol.Unit.prototype.addRallyTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 45, opt_value, proto.SC2APIProtocol.RallyTarget, opt_index);
};


proto.SC2APIProtocol.Unit.prototype.clearRallyTargetsList = function() {
  this.setRallyTargetsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.MapState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.MapState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.MapState.displayName = 'proto.SC2APIProtocol.MapState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.MapState.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.MapState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.MapState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.MapState.toObject = function(includeInstance, msg) {
  var f, obj = {
    visibility: (f = msg.getVisibility()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f),
    creep: (f = msg.getCreep()) && s2clientprotocol_common_pb.ImageData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.MapState}
 */
proto.SC2APIProtocol.MapState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.MapState;
  return proto.SC2APIProtocol.MapState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.MapState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.MapState}
 */
proto.SC2APIProtocol.MapState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setVisibility(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.ImageData;
      reader.readMessage(value,s2clientprotocol_common_pb.ImageData.deserializeBinaryFromReader);
      msg.setCreep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.MapState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.MapState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.MapState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.MapState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisibility();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getCreep();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.ImageData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageData visibility = 1;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.MapState.prototype.getVisibility = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 1));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.MapState.prototype.setVisibility = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.MapState.prototype.clearVisibility = function() {
  this.setVisibility(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.MapState.prototype.hasVisibility = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageData creep = 2;
 * @return {?proto.SC2APIProtocol.ImageData}
 */
proto.SC2APIProtocol.MapState.prototype.getCreep = function() {
  return /** @type{?proto.SC2APIProtocol.ImageData} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.ImageData, 2));
};


/** @param {?proto.SC2APIProtocol.ImageData|undefined} value */
proto.SC2APIProtocol.MapState.prototype.setCreep = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SC2APIProtocol.MapState.prototype.clearCreep = function() {
  this.setCreep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.MapState.prototype.hasCreep = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.Event.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.Event.displayName = 'proto.SC2APIProtocol.Event';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.Event.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadUnitsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.Event}
 */
proto.SC2APIProtocol.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.Event;
  return proto.SC2APIProtocol.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.Event}
 */
proto.SC2APIProtocol.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addDeadUnits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeadUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 dead_units = 1;
 * @return {!Array.<number>}
 */
proto.SC2APIProtocol.Event.prototype.getDeadUnitsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.SC2APIProtocol.Event.prototype.setDeadUnitsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SC2APIProtocol.Event.prototype.addDeadUnits = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.SC2APIProtocol.Event.prototype.clearDeadUnitsList = function() {
  this.setDeadUnitsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.Effect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.Effect.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.Effect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.Effect.displayName = 'proto.SC2APIProtocol.Effect';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.Effect.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.Effect.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.Effect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.Effect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Effect.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectId: jspb.Message.getField(msg, 1),
    posList: jspb.Message.toObjectList(msg.getPosList(),
    s2clientprotocol_common_pb.Point2D.toObject, includeInstance),
    alliance: jspb.Message.getField(msg, 3),
    owner: jspb.Message.getField(msg, 4),
    radius: jspb.Message.getOptionalFloatingPointField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.Effect}
 */
proto.SC2APIProtocol.Effect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.Effect;
  return proto.SC2APIProtocol.Effect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.Effect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.Effect}
 */
proto.SC2APIProtocol.Effect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEffectId(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.Point2D;
      reader.readMessage(value,s2clientprotocol_common_pb.Point2D.deserializeBinaryFromReader);
      msg.addPos(value);
      break;
    case 3:
      var value = /** @type {!proto.SC2APIProtocol.Alliance} */ (reader.readEnum());
      msg.setAlliance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwner(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.Effect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.Effect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.Effect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Effect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      s2clientprotocol_common_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.SC2APIProtocol.Alliance} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional uint32 effect_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.Effect.prototype.getEffectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Effect.prototype.setEffectId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.Effect.prototype.clearEffectId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Effect.prototype.hasEffectId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Point2D pos = 2;
 * @return {!Array.<!proto.SC2APIProtocol.Point2D>}
 */
proto.SC2APIProtocol.Effect.prototype.getPosList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, s2clientprotocol_common_pb.Point2D, 2));
};


/** @param {!Array.<!proto.SC2APIProtocol.Point2D>} value */
proto.SC2APIProtocol.Effect.prototype.setPosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SC2APIProtocol.Point2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.Point2D}
 */
proto.SC2APIProtocol.Effect.prototype.addPos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SC2APIProtocol.Point2D, opt_index);
};


proto.SC2APIProtocol.Effect.prototype.clearPosList = function() {
  this.setPosList([]);
};


/**
 * optional Alliance alliance = 3;
 * @return {!proto.SC2APIProtocol.Alliance}
 */
proto.SC2APIProtocol.Effect.prototype.getAlliance = function() {
  return /** @type {!proto.SC2APIProtocol.Alliance} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.SC2APIProtocol.Alliance} value */
proto.SC2APIProtocol.Effect.prototype.setAlliance = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.Effect.prototype.clearAlliance = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Effect.prototype.hasAlliance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 owner = 4;
 * @return {number}
 */
proto.SC2APIProtocol.Effect.prototype.getOwner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Effect.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.Effect.prototype.clearOwner = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Effect.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float radius = 5;
 * @return {number}
 */
proto.SC2APIProtocol.Effect.prototype.getRadius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.Effect.prototype.setRadius = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.Effect.prototype.clearRadius = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Effect.prototype.hasRadius = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionRaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SC2APIProtocol.ActionRaw.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.ActionRaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionRaw.displayName = 'proto.SC2APIProtocol.ActionRaw';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.ActionRaw.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.ActionRaw.ActionCase = {
  ACTION_NOT_SET: 0,
  UNIT_COMMAND: 1,
  CAMERA_MOVE: 2,
  TOGGLE_AUTOCAST: 3
};

/**
 * @return {proto.SC2APIProtocol.ActionRaw.ActionCase}
 */
proto.SC2APIProtocol.ActionRaw.prototype.getActionCase = function() {
  return /** @type {proto.SC2APIProtocol.ActionRaw.ActionCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.ActionRaw.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionRaw.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionRaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionRaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionRaw.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitCommand: (f = msg.getUnitCommand()) && proto.SC2APIProtocol.ActionRawUnitCommand.toObject(includeInstance, f),
    cameraMove: (f = msg.getCameraMove()) && proto.SC2APIProtocol.ActionRawCameraMove.toObject(includeInstance, f),
    toggleAutocast: (f = msg.getToggleAutocast()) && proto.SC2APIProtocol.ActionRawToggleAutocast.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionRaw}
 */
proto.SC2APIProtocol.ActionRaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionRaw;
  return proto.SC2APIProtocol.ActionRaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionRaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionRaw}
 */
proto.SC2APIProtocol.ActionRaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.ActionRawUnitCommand;
      reader.readMessage(value,proto.SC2APIProtocol.ActionRawUnitCommand.deserializeBinaryFromReader);
      msg.setUnitCommand(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.ActionRawCameraMove;
      reader.readMessage(value,proto.SC2APIProtocol.ActionRawCameraMove.deserializeBinaryFromReader);
      msg.setCameraMove(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.ActionRawToggleAutocast;
      reader.readMessage(value,proto.SC2APIProtocol.ActionRawToggleAutocast.deserializeBinaryFromReader);
      msg.setToggleAutocast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionRaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionRaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionRaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionRaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.ActionRawUnitCommand.serializeBinaryToWriter
    );
  }
  f = message.getCameraMove();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SC2APIProtocol.ActionRawCameraMove.serializeBinaryToWriter
    );
  }
  f = message.getToggleAutocast();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SC2APIProtocol.ActionRawToggleAutocast.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActionRawUnitCommand unit_command = 1;
 * @return {?proto.SC2APIProtocol.ActionRawUnitCommand}
 */
proto.SC2APIProtocol.ActionRaw.prototype.getUnitCommand = function() {
  return /** @type{?proto.SC2APIProtocol.ActionRawUnitCommand} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionRawUnitCommand, 1));
};


/** @param {?proto.SC2APIProtocol.ActionRawUnitCommand|undefined} value */
proto.SC2APIProtocol.ActionRaw.prototype.setUnitCommand = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.SC2APIProtocol.ActionRaw.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionRaw.prototype.clearUnitCommand = function() {
  this.setUnitCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionRaw.prototype.hasUnitCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ActionRawCameraMove camera_move = 2;
 * @return {?proto.SC2APIProtocol.ActionRawCameraMove}
 */
proto.SC2APIProtocol.ActionRaw.prototype.getCameraMove = function() {
  return /** @type{?proto.SC2APIProtocol.ActionRawCameraMove} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionRawCameraMove, 2));
};


/** @param {?proto.SC2APIProtocol.ActionRawCameraMove|undefined} value */
proto.SC2APIProtocol.ActionRaw.prototype.setCameraMove = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SC2APIProtocol.ActionRaw.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionRaw.prototype.clearCameraMove = function() {
  this.setCameraMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionRaw.prototype.hasCameraMove = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ActionRawToggleAutocast toggle_autocast = 3;
 * @return {?proto.SC2APIProtocol.ActionRawToggleAutocast}
 */
proto.SC2APIProtocol.ActionRaw.prototype.getToggleAutocast = function() {
  return /** @type{?proto.SC2APIProtocol.ActionRawToggleAutocast} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ActionRawToggleAutocast, 3));
};


/** @param {?proto.SC2APIProtocol.ActionRawToggleAutocast|undefined} value */
proto.SC2APIProtocol.ActionRaw.prototype.setToggleAutocast = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.SC2APIProtocol.ActionRaw.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionRaw.prototype.clearToggleAutocast = function() {
  this.setToggleAutocast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionRaw.prototype.hasToggleAutocast = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionRawUnitCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ActionRawUnitCommand.repeatedFields_, proto.SC2APIProtocol.ActionRawUnitCommand.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.ActionRawUnitCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionRawUnitCommand.displayName = 'proto.SC2APIProtocol.ActionRawUnitCommand';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ActionRawUnitCommand.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.ActionRawUnitCommand.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.TargetCase = {
  TARGET_NOT_SET: 0,
  TARGET_WORLD_SPACE_POS: 2,
  TARGET_UNIT_TAG: 3
};

/**
 * @return {proto.SC2APIProtocol.ActionRawUnitCommand.TargetCase}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.getTargetCase = function() {
  return /** @type {proto.SC2APIProtocol.ActionRawUnitCommand.TargetCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.ActionRawUnitCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionRawUnitCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionRawUnitCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionRawUnitCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityId: jspb.Message.getField(msg, 1),
    targetWorldSpacePos: (f = msg.getTargetWorldSpacePos()) && s2clientprotocol_common_pb.Point2D.toObject(includeInstance, f),
    targetUnitTag: jspb.Message.getField(msg, 3),
    unitTagsList: jspb.Message.getRepeatedField(msg, 4),
    queueCommand: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionRawUnitCommand}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionRawUnitCommand;
  return proto.SC2APIProtocol.ActionRawUnitCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionRawUnitCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionRawUnitCommand}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAbilityId(value);
      break;
    case 2:
      var value = new s2clientprotocol_common_pb.Point2D;
      reader.readMessage(value,s2clientprotocol_common_pb.Point2D.deserializeBinaryFromReader);
      msg.setTargetWorldSpacePos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTargetUnitTag(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addUnitTags(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQueueCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionRawUnitCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionRawUnitCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionRawUnitCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTargetWorldSpacePos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      s2clientprotocol_common_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUnitTagsList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int32 ability_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionRawUnitCommand.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Point2D target_world_space_pos = 2;
 * @return {?proto.SC2APIProtocol.Point2D}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.getTargetWorldSpacePos = function() {
  return /** @type{?proto.SC2APIProtocol.Point2D} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point2D, 2));
};


/** @param {?proto.SC2APIProtocol.Point2D|undefined} value */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.setTargetWorldSpacePos = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SC2APIProtocol.ActionRawUnitCommand.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionRawUnitCommand.prototype.clearTargetWorldSpacePos = function() {
  this.setTargetWorldSpacePos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.hasTargetWorldSpacePos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 target_unit_tag = 3;
 * @return {number}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.getTargetUnitTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.setTargetUnitTag = function(value) {
  jspb.Message.setOneofField(this, 3, proto.SC2APIProtocol.ActionRawUnitCommand.oneofGroups_[0], value);
};


proto.SC2APIProtocol.ActionRawUnitCommand.prototype.clearTargetUnitTag = function() {
  jspb.Message.setOneofField(this, 3, proto.SC2APIProtocol.ActionRawUnitCommand.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.hasTargetUnitTag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint64 unit_tags = 4;
 * @return {!Array.<number>}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.getUnitTagsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.setUnitTagsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.addUnitTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.SC2APIProtocol.ActionRawUnitCommand.prototype.clearUnitTagsList = function() {
  this.setUnitTagsList([]);
};


/**
 * optional bool queue_command = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.getQueueCommand = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.setQueueCommand = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.ActionRawUnitCommand.prototype.clearQueueCommand = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionRawUnitCommand.prototype.hasQueueCommand = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionRawCameraMove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.ActionRawCameraMove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionRawCameraMove.displayName = 'proto.SC2APIProtocol.ActionRawCameraMove';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionRawCameraMove.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionRawCameraMove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionRawCameraMove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionRawCameraMove.toObject = function(includeInstance, msg) {
  var f, obj = {
    centerWorldSpace: (f = msg.getCenterWorldSpace()) && s2clientprotocol_common_pb.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionRawCameraMove}
 */
proto.SC2APIProtocol.ActionRawCameraMove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionRawCameraMove;
  return proto.SC2APIProtocol.ActionRawCameraMove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionRawCameraMove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionRawCameraMove}
 */
proto.SC2APIProtocol.ActionRawCameraMove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new s2clientprotocol_common_pb.Point;
      reader.readMessage(value,s2clientprotocol_common_pb.Point.deserializeBinaryFromReader);
      msg.setCenterWorldSpace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionRawCameraMove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionRawCameraMove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionRawCameraMove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionRawCameraMove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenterWorldSpace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      s2clientprotocol_common_pb.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point center_world_space = 1;
 * @return {?proto.SC2APIProtocol.Point}
 */
proto.SC2APIProtocol.ActionRawCameraMove.prototype.getCenterWorldSpace = function() {
  return /** @type{?proto.SC2APIProtocol.Point} */ (
    jspb.Message.getWrapperField(this, s2clientprotocol_common_pb.Point, 1));
};


/** @param {?proto.SC2APIProtocol.Point|undefined} value */
proto.SC2APIProtocol.ActionRawCameraMove.prototype.setCenterWorldSpace = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.ActionRawCameraMove.prototype.clearCenterWorldSpace = function() {
  this.setCenterWorldSpace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionRawCameraMove.prototype.hasCenterWorldSpace = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ActionRawToggleAutocast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ActionRawToggleAutocast.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.ActionRawToggleAutocast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ActionRawToggleAutocast.displayName = 'proto.SC2APIProtocol.ActionRawToggleAutocast';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ActionRawToggleAutocast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ActionRawToggleAutocast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityId: jspb.Message.getField(msg, 1),
    unitTagsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ActionRawToggleAutocast}
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ActionRawToggleAutocast;
  return proto.SC2APIProtocol.ActionRawToggleAutocast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ActionRawToggleAutocast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ActionRawToggleAutocast}
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAbilityId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addUnitTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ActionRawToggleAutocast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ActionRawToggleAutocast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUnitTagsList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      2,
      f
    );
  }
};


/**
 * optional int32 ability_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.getAbilityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.setAbilityId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.clearAbilityId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.hasAbilityId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint64 unit_tags = 2;
 * @return {!Array.<number>}
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.getUnitTagsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.setUnitTagsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.addUnitTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SC2APIProtocol.ActionRawToggleAutocast.prototype.clearUnitTagsList = function() {
  this.setUnitTagsList([]);
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.DisplayType = {
  VISIBLE: 1,
  SNAPSHOT: 2,
  HIDDEN: 3,
  PLACEHOLDER: 4
};

/**
 * @enum {number}
 */
proto.SC2APIProtocol.Alliance = {
  SELF: 1,
  ALLY: 2,
  NEUTRAL: 3,
  ENEMY: 4
};

/**
 * @enum {number}
 */
proto.SC2APIProtocol.CloakState = {
  CLOAKEDUNKNOWN: 0,
  CLOAKED: 1,
  CLOAKEDDETECTED: 2,
  NOTCLOAKED: 3,
  CLOAKEDALLIED: 4
};

goog.object.extend(exports, proto.SC2APIProtocol);
